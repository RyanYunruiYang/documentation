(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{229:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return b})),a.d(t,"metadata",(function(){return r})),a.d(t,"toc",(function(){return s})),a.d(t,"default",(function(){return p}));var n=a(3),l=a(7),i=(a(0),a(347)),c=["components"],b={title:"Rucio client API"},r={unversionedId:"rucio_client_api",id:"rucio_client_api",isDocsHomePage:!1,title:"Table of Contents",description:"* metaclient",source:"@site/../docs/rucio_client_api.md",sourceDirName:".",slug:"/rucio_client_api",permalink:"/documentation/rucio_client_api",editUrl:"https://github.com/rucio/documentation/tree/main/docs/../docs/rucio_client_api.md",version:"current",frontMatter:{title:"Rucio client API"}},s=[{value:"MetaClient Objects",id:"metaclient-objects",children:[]},{value:"RequestClient Objects",id:"requestclient-objects",children:[]},{value:"FileClient Objects",id:"fileclient-objects",children:[]},{value:"BaseExtractionTool Objects",id:"baseextractiontool-objects",children:[]},{value:"DownloadClient Objects",id:"downloadclient-objects",children:[]},{value:"RSEClient Objects",id:"rseclient-objects",children:[]},{value:"CredentialClient Objects",id:"credentialclient-objects",children:[]},{value:"LockClient Objects",id:"lockclient-objects",children:[]},{value:"UploadClient Objects",id:"uploadclient-objects",children:[]},{value:"BaseClient Objects",id:"baseclient-objects",children:[]},{value:"ReplicaClient Objects",id:"replicaclient-objects",children:[]},{value:"AccountClient Objects",id:"accountclient-objects",children:[]},{value:"SubscriptionClient Objects",id:"subscriptionclient-objects",children:[]},{value:"ScopeClient Objects",id:"scopeclient-objects",children:[]},{value:"ConfigClient Objects",id:"configclient-objects",children:[]},{value:"ImportClient Objects",id:"importclient-objects",children:[]},{value:"DIDClient Objects",id:"didclient-objects",children:[]},{value:"DiracClient Objects",id:"diracclient-objects",children:[]},{value:"ExportClient Objects",id:"exportclient-objects",children:[]},{value:"LifetimeClient Objects",id:"lifetimeclient-objects",children:[]},{value:"AccountLimitClient Objects",id:"accountlimitclient-objects",children:[]},{value:"Client Objects",id:"client-objects",children:[]},{value:"PingClient Objects",id:"pingclient-objects",children:[]},{value:"RuleClient Objects",id:"ruleclient-objects",children:[]},{value:"DQ2Client Objects",id:"dq2client-objects",children:[]},{value:"TouchClient Objects",id:"touchclient-objects",children:[]}],o={toc:s};function p(e){var t=e.components,a=Object(l.a)(e,c);return Object(i.b)("wrapper",Object(n.a)({},o,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metaclient"},"metaclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metaclient.MetaClient"},"MetaClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metaclient.MetaClient.add_key"},"add","_","key")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metaclient.MetaClient.list_keys"},"list","_","keys")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metaclient.MetaClient.list_values"},"list","_","values")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metaclient.MetaClient.add_value"},"add","_","value")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metaclient.MetaClient.del_value"},"del","_","value")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metaclient.MetaClient.del_key"},"del","_","key")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#metaclient.MetaClient.update_key"},"update","_","key")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#requestclient"},"requestclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#requestclient.RequestClient"},"RequestClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#requestclient.RequestClient.list_request_by_did"},"list","_","request","_","by","_","did")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#fileclient"},"fileclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#fileclient.FileClient"},"FileClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#fileclient.FileClient.__init__"},"_","_","init","_","_")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#fileclient.FileClient.list_file_replicas"},"list","_","file","_","replicas")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#downloadclient"},"downloadclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#downloadclient.BaseExtractionTool"},"BaseExtractionTool"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#downloadclient.BaseExtractionTool.__init__"},"_","_","init","_","_")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#downloadclient.BaseExtractionTool.is_useable"},"is","_","useable")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#downloadclient.BaseExtractionTool.try_extraction"},"try","_","extraction")))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#downloadclient.DownloadClient"},"DownloadClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#downloadclient.DownloadClient.__init__"},"_","_","init","_","_")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#downloadclient.DownloadClient.download_pfns"},"download","_","pfns")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#downloadclient.DownloadClient.download_dids"},"download","_","dids")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#downloadclient.DownloadClient.download_from_metalink_file"},"download","_","from","_","metalink","_","file")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#downloadclient.DownloadClient.download_aria2c"},"download","_","aria2c")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient"},"rseclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient"},"RSEClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.get_rse"},"get","_","rse")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.add_rse"},"add","_","rse")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.update_rse"},"update","_","rse")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.delete_rse"},"delete","_","rse")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.list_rses"},"list","_","rses")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.add_rse_attribute"},"add","_","rse","_","attribute")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.delete_rse_attribute"},"delete","_","rse","_","attribute")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.list_rse_attributes"},"list","_","rse","_","attributes")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.add_protocol"},"add","_","protocol")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.get_protocols"},"get","_","protocols")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.lfns2pfns"},"lfns2pfns")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.delete_protocols"},"delete","_","protocols")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.update_protocols"},"update","_","protocols")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.swap_protocols"},"swap","_","protocols")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.add_qos_policy"},"add","_","qos","_","policy")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.delete_qos_policy"},"delete","_","qos","_","policy")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.list_qos_policies"},"list","_","qos","_","policies")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.set_rse_usage"},"set","_","rse","_","usage")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.get_rse_usage"},"get","_","rse","_","usage")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.list_rse_usage_history"},"list","_","rse","_","usage","_","history")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.set_rse_limits"},"set","_","rse","_","limits")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.get_rse_limits"},"get","_","rse","_","limits")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.delete_rse_limits"},"delete","_","rse","_","limits")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.add_distance"},"add","_","distance")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.update_distance"},"update","_","distance")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#rseclient.RSEClient.get_distance"},"get","_","distance")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#credentialclient"},"credentialclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#credentialclient.CredentialClient"},"CredentialClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#credentialclient.CredentialClient.get_signed_url"},"get","_","signed","_","url")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#lockclient"},"lockclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#lockclient.LockClient"},"LockClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#lockclient.LockClient.get_dataset_locks"},"get","_","dataset","_","locks")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#lockclient.LockClient.get_dataset_locks_by_rse"},"get","_","dataset","_","locks","_","by","_","rse")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#uploadclient"},"uploadclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#uploadclient.UploadClient"},"UploadClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#uploadclient.UploadClient.__init__"},"_","_","init","_","_")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#uploadclient.UploadClient.upload"},"upload")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#__init__"},"_","_","init","_","_")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#baseclient"},"baseclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#baseclient.back_off"},"back","_","off")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#baseclient.choice"},"choice")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#baseclient.BaseClient"},"BaseClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#baseclient.BaseClient.__init__"},"_","_","init","_","_")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient"},"replicaclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient.ReplicaClient"},"ReplicaClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient.ReplicaClient.declare_bad_file_replicas"},"declare","_","bad","_","file","_","replicas")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient.ReplicaClient.declare_bad_did_replicas"},"declare","_","bad","_","did","_","replicas")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient.ReplicaClient.declare_suspicious_file_replicas"},"declare","_","suspicious","_","file","_","replicas")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient.ReplicaClient.get_did_from_pfns"},"get","_","did","_","from","_","pfns")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient.ReplicaClient.list_replicas"},"list","_","replicas")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient.ReplicaClient.list_suspicious_replicas"},"list","_","suspicious","_","replicas")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient.ReplicaClient.add_replica"},"add","_","replica")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient.ReplicaClient.add_replicas"},"add","_","replicas")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient.ReplicaClient.delete_replicas"},"delete","_","replicas")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient.ReplicaClient.update_replicas_states"},"update","_","replicas","_","states")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient.ReplicaClient.list_dataset_replicas"},"list","_","dataset","_","replicas")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient.ReplicaClient.list_dataset_replicas_bulk"},"list","_","dataset","_","replicas","_","bulk")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient.ReplicaClient.list_dataset_replicas_vp"},"list","_","dataset","_","replicas","_","vp")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient.ReplicaClient.list_datasets_per_rse"},"list","_","datasets","_","per","_","rse")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient.ReplicaClient.add_bad_pfns"},"add","_","bad","_","pfns")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#replicaclient.ReplicaClient.set_tombstone"},"set","_","tombstone")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient"},"accountclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient"},"AccountClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.add_account"},"add","_","account")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.delete_account"},"delete","_","account")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.get_account"},"get","_","account")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.update_account"},"update","_","account")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.list_accounts"},"list","_","accounts")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.whoami"},"whoami")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.add_identity"},"add","_","identity")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.del_identity"},"del","_","identity")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.list_identities"},"list","_","identities")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.list_account_rules"},"list","_","account","_","rules")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.get_account_limits"},"get","_","account","_","limits")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.get_global_account_limit"},"get","_","global","_","account","_","limit")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.get_global_account_limits"},"get","_","global","_","account","_","limits")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.get_local_account_limits"},"get","_","local","_","account","_","limits")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.get_local_account_limit"},"get","_","local","_","account","_","limit")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.get_local_account_usage"},"get","_","local","_","account","_","usage")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.get_global_account_usage"},"get","_","global","_","account","_","usage")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.get_account_usage_history"},"get","_","account","_","usage","_","history")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.list_account_attributes"},"list","_","account","_","attributes")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.add_account_attribute"},"add","_","account","_","attribute")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountclient.AccountClient.delete_account_attribute"},"delete","_","account","_","attribute")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#subscriptionclient"},"subscriptionclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#subscriptionclient.SubscriptionClient"},"SubscriptionClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#subscriptionclient.SubscriptionClient.add_subscription"},"add","_","subscription")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#subscriptionclient.SubscriptionClient.list_subscriptions"},"list","_","subscriptions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#subscriptionclient.SubscriptionClient.update_subscription"},"update","_","subscription")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#subscriptionclient.SubscriptionClient.list_subscription_rules"},"list","_","subscription","_","rules")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#scopeclient"},"scopeclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#scopeclient.ScopeClient"},"ScopeClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#scopeclient.ScopeClient.add_scope"},"add","_","scope")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#scopeclient.ScopeClient.list_scopes"},"list","_","scopes")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#scopeclient.ScopeClient.list_scopes_for_account"},"list","_","scopes","_","for","_","account")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#configclient"},"configclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#configclient.ConfigClient"},"ConfigClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#configclient.ConfigClient.get_config"},"get","_","config")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#configclient.ConfigClient.set_config_option"},"set","_","config","_","option")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#configclient.ConfigClient.delete_config_option"},"delete","_","config","_","option")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#importclient"},"importclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#importclient.ImportClient"},"ImportClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#importclient.ImportClient.import_data"},"import","_","data")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient"},"didclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient"},"DIDClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.list_dids"},"list","_","dids")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.list_dids_extended"},"list","_","dids","_","extended")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.add_did"},"add","_","did")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.add_dids"},"add","_","dids")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.add_dataset"},"add","_","dataset")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.add_datasets"},"add","_","datasets")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.add_container"},"add","_","container")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.add_containers"},"add","_","containers")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.attach_dids"},"attach","_","dids")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.detach_dids"},"detach","_","dids")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.attach_dids_to_dids"},"attach","_","dids","_","to","_","dids")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.add_files_to_datasets"},"add","_","files","_","to","_","datasets")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.add_datasets_to_containers"},"add","_","datasets","_","to","_","containers")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.add_containers_to_containers"},"add","_","containers","_","to","_","containers")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.add_files_to_dataset"},"add","_","files","_","to","_","dataset")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.add_files_to_archive"},"add","_","files","_","to","_","archive")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.add_datasets_to_container"},"add","_","datasets","_","to","_","container")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.add_containers_to_container"},"add","_","containers","_","to","_","container")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.list_content"},"list","_","content")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.list_content_history"},"list","_","content","_","history")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.list_files"},"list","_","files")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.get_did"},"get","_","did")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.get_metadata"},"get","_","metadata")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.get_metadata_bulk"},"get","_","metadata","_","bulk")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.set_metadata"},"set","_","metadata")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.set_metadata_bulk"},"set","_","metadata","_","bulk")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.set_status"},"set","_","status")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.close"},"close")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.delete_metadata"},"delete","_","metadata")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.list_did_rules"},"list","_","did","_","rules")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.list_associated_rules_for_file"},"list","_","associated","_","rules","_","for","_","file")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.get_dataset_by_guid"},"get","_","dataset","_","by","_","guid")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.scope_list"},"scope","_","list")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.list_parent_dids"},"list","_","parent","_","dids")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.create_did_sample"},"create","_","did","_","sample")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.resurrect"},"resurrect")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.add_temporary_dids"},"add","_","temporary","_","dids")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.list_archive_content"},"list","_","archive","_","content")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#didclient.DIDClient.list_dids_by_meta"},"list","_","dids","_","by","_","meta")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#diracclient"},"diracclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#diracclient.DiracClient"},"DiracClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#diracclient.DiracClient.add_files"},"add","_","files")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#exportclient"},"exportclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#exportclient.ExportClient"},"ExportClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#exportclient.ExportClient.export_data"},"export","_","data")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#lifetimeclient"},"lifetimeclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#lifetimeclient.LifetimeClient"},"LifetimeClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#lifetimeclient.LifetimeClient.list_exceptions"},"list","_","exceptions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#lifetimeclient.LifetimeClient.add_exception"},"add","_","exception")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountlimitclient"},"accountlimitclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountlimitclient.AccountLimitClient"},"AccountLimitClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountlimitclient.AccountLimitClient.set_account_limit"},"set","_","account","_","limit")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountlimitclient.AccountLimitClient.delete_account_limit"},"delete","_","account","_","limit")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountlimitclient.AccountLimitClient.set_local_account_limit"},"set","_","local","_","account","_","limit")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountlimitclient.AccountLimitClient.delete_local_account_limit"},"delete","_","local","_","account","_","limit")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountlimitclient.AccountLimitClient.set_global_account_limit"},"set","_","global","_","account","_","limit")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#accountlimitclient.AccountLimitClient.delete_global_account_limit"},"delete","_","global","_","account","_","limit")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#client"},"client"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#client.Client"},"Client"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#client.Client.__init__"},"_","_","init","_","_")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#pingclient"},"pingclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#pingclient.PingClient"},"PingClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#pingclient.PingClient.ping"},"ping")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#ruleclient"},"ruleclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#ruleclient.RuleClient"},"RuleClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#ruleclient.RuleClient.add_replication_rule"},"add","_","replication","_","rule")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#ruleclient.RuleClient.delete_replication_rule"},"delete","_","replication","_","rule")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#ruleclient.RuleClient.get_replication_rule"},"get","_","replication","_","rule")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#ruleclient.RuleClient.update_replication_rule"},"update","_","replication","_","rule")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#ruleclient.RuleClient.reduce_replication_rule"},"reduce","_","replication","_","rule")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#ruleclient.RuleClient.move_replication_rule"},"move","_","replication","_","rule")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#ruleclient.RuleClient.approve_replication_rule"},"approve","_","replication","_","rule")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#ruleclient.RuleClient.deny_replication_rule"},"deny","_","replication","_","rule")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#ruleclient.RuleClient.list_replication_rule_full_history"},"list","_","replication","_","rule","_","full","_","history")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#ruleclient.RuleClient.examine_replication_rule"},"examine","_","replication","_","rule")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#ruleclient.RuleClient.list_replica_locks"},"list","_","replica","_","locks")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#ruleclient.RuleClient.list_replication_rules"},"list","_","replication","_","rules")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client"},"dq2client"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client"},"DQ2Client"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.finger"},"finger")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.bulkDeleteDatasetReplicas"},"bulkDeleteDatasetReplicas")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.cancelReplicaDeletions"},"cancelReplicaDeletions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.checkDatasetConsistency"},"checkDatasetConsistency")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.closeDataset"},"closeDataset")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.declareBadFiles"},"declareBadFiles")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.declareSuspiciousFiles"},"declareSuspiciousFiles")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.deleteDatasetReplicas"},"deleteDatasetReplicas")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.deleteDatasetSubscription"},"deleteDatasetSubscription")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.deleteDatasetSubscriptions"},"deleteDatasetSubscriptions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.deleteDatasetVersionSubscriptions"},"deleteDatasetVersionSubscriptions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.deleteDatasetsFromContainer"},"deleteDatasetsFromContainer")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.deleteFilesFromDataset"},"deleteFilesFromDataset")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.eraseDataset"},"eraseDataset")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.freezeDataset"},"freezeDataset")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.getDatasetSize"},"getDatasetSize")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.getMasterReplicaLocation"},"getMasterReplicaLocation")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.getMetaDataAttribute"},"getMetaDataAttribute")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.getNumberOfFiles"},"getNumberOfFiles")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.getState"},"getState")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.getVersionMetadata"},"getVersionMetadata")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listDatasetReplicas"},"listDatasetReplicas")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listDatasetReplicasInContainer"},"listDatasetReplicasInContainer")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listDatasets"},"listDatasets")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listDatasets2"},"listDatasets2")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listDatasetsByCreationDate"},"listDatasetsByCreationDate")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listDatasetsByGUIDs"},"listDatasetsByGUIDs")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listDatasetsByMetaData"},"listDatasetsByMetaData")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listDatasetsByNameInSite"},"listDatasetsByNameInSite")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listDatasetsInContainer"},"listDatasetsInContainer")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listDatasetsInSite"},"listDatasetsInSite")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listFileReplicas"},"listFileReplicas")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listFileReplicasBySites"},"listFileReplicasBySites")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listFilesInDataset"},"listFilesInDataset")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listMetaDataAttributes"},"listMetaDataAttributes")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listMetaDataReplica"},"listMetaDataReplica")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listSubscriptionInfo"},"listSubscriptionInfo")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listSubscriptions"},"listSubscriptions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listSubscriptionsInSite"},"listSubscriptionsInSite")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.listSuspiciousFiles"},"listSuspiciousFiles")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.ping"},"ping")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.queryReplicaHistory"},"queryReplicaHistory")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.queryStorageUsage"},"queryStorageUsage")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.queryStorageUsageHistory"},"queryStorageUsageHistory")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.registerContainer"},"registerContainer")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.registerDatasetLocation"},"registerDatasetLocation")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.registerDatasetSubscription"},"registerDatasetSubscription")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.registerDatasetsInContainer"},"registerDatasetsInContainer")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.registerFilesInDataset"},"registerFilesInDataset")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.registerFilesInDatasets"},"registerFilesInDatasets")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.registerNewDataset"},"registerNewDataset")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.registerNewDataset2"},"registerNewDataset2")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.registerNewVersion"},"registerNewVersion")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.registerNewVersion2"},"registerNewVersion2")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.resetSubscription"},"resetSubscription")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.resetSubscriptionsInSite"},"resetSubscriptionsInSite")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.searchDatasets"},"searchDatasets")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.setDatasetReplicaToDeleted"},"setDatasetReplicaToDeleted")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.setMetaDataAttribute"},"setMetaDataAttribute")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.setReplicaMetaDataAttribute"},"setReplicaMetaDataAttribute")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#dq2client.DQ2Client.verifyFilesInDataset"},"verifyFilesInDataset")))))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#touchclient"},"touchclient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#touchclient.TouchClient"},"TouchClient"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"#touchclient.TouchClient.touch"},"touch"))))))),Object(i.b)("p",null,'\\<a name="metaclient"',">","\\</a",">"),Object(i.b)("h1",{id:"metaclient"},"metaclient"),Object(i.b)("p",null,'\\<a name="metaclient.MetaClient"',">","\\</a",">"),Object(i.b)("h2",{id:"metaclient-objects"},"MetaClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class MetaClient(BaseClient)\n")),Object(i.b)("p",null,"Meta client class for working with data identifier attributes"),Object(i.b)("p",null,'\\<a name="metaclient.MetaClient.add_key"',">","\\</a",">"),Object(i.b)("h4",{id:"add_key"},"add","_","key"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_key(key, key_type, value_type=None, value_regexp=None)\n")),Object(i.b)("p",null,"Sends the request to add a new key."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"key"),": the name for the new key."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"key_type"),": the type of the key: all(container, dataset, file), collection(dataset or container), file, derived(compute from file for collection)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"value_type"),": the type of the value, if defined."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"value_regexp"),": the regular expression that values should match, if defined.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if key was created successfully."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Duplicate"),": if key already exists.")),Object(i.b)("p",null,'\\<a name="metaclient.MetaClient.list_keys"',">","\\</a",">"),Object(i.b)("h4",{id:"list_keys"},"list","_","keys"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_keys()\n")),Object(i.b)("p",null,"Sends the request to list all keys."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"a list containing the names of all keys."),Object(i.b)("p",null,'\\<a name="metaclient.MetaClient.list_values"',">","\\</a",">"),Object(i.b)("h4",{id:"list_values"},"list","_","values"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_values(key)\n")),Object(i.b)("p",null,"Sends the request to list all values for a key."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"a list containing the names of all values for a key."),Object(i.b)("p",null,'\\<a name="metaclient.MetaClient.add_value"',">","\\</a",">"),Object(i.b)("h4",{id:"add_value"},"add","_","value"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_value(key, value)\n")),Object(i.b)("p",null,"Sends the request to add a value to a key."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"key"),": the name for key."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"value"),": the value.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if value was created successfully."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Duplicate"),": if valid already exists.")),Object(i.b)("p",null,'\\<a name="metaclient.MetaClient.del_value"',">","\\</a",">"),Object(i.b)("h4",{id:"del_value"},"del","_","value"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | del_value(key, value)\n")),Object(i.b)("p",null,"Delete a value for a key."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"key"),": the name for key."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"value"),": the value.")),Object(i.b)("p",null,'\\<a name="metaclient.MetaClient.del_key"',">","\\</a",">"),Object(i.b)("h4",{id:"del_key"},"del","_","key"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | del_key(key)\n")),Object(i.b)("p",null,"Delete an allowed key."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"key"),": the name for key.")),Object(i.b)("p",null,'\\<a name="metaclient.MetaClient.update_key"',">","\\</a",">"),Object(i.b)("h4",{id:"update_key"},"update","_","key"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | update_key(key, type=None, regepx=None)\n")),Object(i.b)("p",null,"Update a key."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"key"),": the name for key."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"type"),": the type of the value, if defined."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"regexp"),": the regular expression that values should match, if defined.")),Object(i.b)("p",null,'\\<a name="requestclient"',">","\\</a",">"),Object(i.b)("h1",{id:"requestclient"},"requestclient"),Object(i.b)("p",null,'\\<a name="requestclient.RequestClient"',">","\\</a",">"),Object(i.b)("h2",{id:"requestclient-objects"},"RequestClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class RequestClient(BaseClient)\n")),Object(i.b)("p",null,'\\<a name="requestclient.RequestClient.list_request_by_did"',">","\\</a",">"),Object(i.b)("h4",{id:"list_request_by_did"},"list","_","request","_","by","_","did"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_request_by_did(name, rse, scope=None)\n")),Object(i.b)("p",null,"Return latest request details for a DID"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": DID\n:type name: str"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": Destination RSE name\n:type rse: str"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": rucio scope, defaults to None"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": str, optional")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"exc_cls"),": from BaseClient._get_exception")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"request information\n:rtype: dict"),Object(i.b)("p",null,'\\<a name="fileclient"',">","\\</a",">"),Object(i.b)("h1",{id:"fileclient"},"fileclient"),Object(i.b)("p",null,'\\<a name="fileclient.FileClient"',">","\\</a",">"),Object(i.b)("h2",{id:"fileclient-objects"},"FileClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class FileClient(BaseClient)\n")),Object(i.b)("p",null,"Dataset client class for working with dataset"),Object(i.b)("p",null,'\\<a name="fileclient.FileClient.',Object(i.b)("strong",{parentName:"p"},"init"),'"',">","\\</a",">"),Object(i.b)("h4",{id:"__init__"},"_","_","init","_","_"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | __init__(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None)\n")),Object(i.b)("p",null,"Constructor"),Object(i.b)("p",null,'\\<a name="fileclient.FileClient.list_file_replicas"',">","\\</a",">"),Object(i.b)("h4",{id:"list_file_replicas"},"list","_","file","_","replicas"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_file_replicas(scope, lfn)\n")),Object(i.b)("p",null,"List file replicas."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": the scope."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"lfn"),": the lfn.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"List of replicas."),Object(i.b)("p",null,'\\<a name="downloadclient"',">","\\</a",">"),Object(i.b)("h1",{id:"downloadclient"},"downloadclient"),Object(i.b)("p",null,'\\<a name="downloadclient.BaseExtractionTool"',">","\\</a",">"),Object(i.b)("h2",{id:"baseextractiontool-objects"},"BaseExtractionTool Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class BaseExtractionTool()\n")),Object(i.b)("p",null,'\\<a name="downloadclient.BaseExtractionTool.',Object(i.b)("strong",{parentName:"p"},"init"),'"',">","\\</a",">"),Object(i.b)("h4",{id:"__init__-1"},"_","_","init","_","_"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | __init__(program_name, useability_check_args, extract_args, logger=logging.log)\n")),Object(i.b)("p",null,"Initialises a extraction tool object"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"program_name"),": the name of the archive extraction program, e.g., unzip"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"useability_check_args"),": the arguments of the extraction program to test if its installed, e.g., --version"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"extract_args"),": the arguments that will be passed to the program for extraction"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"logger"),": optional decorated logging.log object that can be passed from the calling daemon or client.")),Object(i.b)("p",null,'\\<a name="downloadclient.BaseExtractionTool.is_useable"',">","\\</a",">"),Object(i.b)("h4",{id:"is_useable"},"is","_","useable"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | is_useable()\n")),Object(i.b)("p",null,"Checks if the extraction tool is installed and usable"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if it is usable otherwise False"),Object(i.b)("p",null,'\\<a name="downloadclient.BaseExtractionTool.try_extraction"',">","\\</a",">"),Object(i.b)("h4",{id:"try_extraction"},"try","_","extraction"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | try_extraction(archive_file_path, file_to_extract, dest_dir_path)\n")),Object(i.b)("p",null,"Calls the extraction program to extract a file from an archive"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"archive_file_path"),": path to the archive"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"file_to_extract"),": file name to extract from the archive"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dest_dir_path"),": destination directory where the extracted file will be stored")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True on success otherwise False"),Object(i.b)("p",null,'\\<a name="downloadclient.DownloadClient"',">","\\</a",">"),Object(i.b)("h2",{id:"downloadclient-objects"},"DownloadClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class DownloadClient()\n")),Object(i.b)("p",null,'\\<a name="downloadclient.DownloadClient.',Object(i.b)("strong",{parentName:"p"},"init"),'"',">","\\</a",">"),Object(i.b)("h4",{id:"__init__-2"},"_","_","init","_","_"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | __init__(client=None, logger=None, tracing=True, check_admin=False, check_pcache=False)\n")),Object(i.b)("p",null,"Initialises the basic settings for an DownloadClient object"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"client"),": Optional: rucio.client.client.Client object. If None, a new object will be created."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"external_traces"),": Optional: reference to a list where traces can be added"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"logger"),": Optional: logging.Logger object. If None, default logger will be used.")),Object(i.b)("p",null,'\\<a name="downloadclient.DownloadClient.download_pfns"',">","\\</a",">"),Object(i.b)("h4",{id:"download_pfns"},"download","_","pfns"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | download_pfns(items, num_threads=2, trace_custom_fields={}, traces_copy_out=None)\n")),Object(i.b)("p",null,"Download items with a given PFN. This function can only download files, no datasets."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"items"),": List of dictionaries. Each dictionary describing a file to download. Keys:\npfn                 - PFN string of this file\ndid                 - DID string of this file (e.g. 'scope:file.name'). Wildcards are not allowed\nrse                 - rse name (e.g. 'CERN-PROD_DATADISK'). RSE Expressions are not allowed\nbase_dir            - Optional: Base directory where the downloaded files will be stored. (Default: '.')\nno_subdir           - Optional: If true, files are written directly into base_dir. (Default: False)\nadler32             - Optional: The adler32 checmsum to compare the downloaded files adler32 checksum with\nmd5                 - Optional: The md5 checksum to compare the downloaded files md5 checksum with\ntransfer_timeout    - Optional: Timeout time for the download protocols. (Default: None)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"num_threads"),": Suggestion of number of threads to use for the download. It will be lowered if it's too high."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"trace_custom_fields"),": Custom key value pairs to send with the traces"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"traces_copy_out"),": reference to an external list, where the traces should be uploaded")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"a list of dictionaries with an entry for each file, containing the input options, the did, and the clientState\nclientState can be one of the following: ALREADY_DONE, DONE, FILE_NOT_FOUND, FAIL_VALIDATE, FAILED"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"InputValidationError"),": if one of the input items is in the wrong format"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"NoFilesDownloaded"),": if no files could be downloaded"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"NotAllFilesDownloaded"),": if not all files could be downloaded"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RucioException"),": if something unexpected went wrong during the download")),Object(i.b)("p",null,'\\<a name="downloadclient.DownloadClient.download_dids"',">","\\</a",">"),Object(i.b)("h4",{id:"download_dids"},"download","_","dids"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | download_dids(items, num_threads=2, trace_custom_fields={}, traces_copy_out=None)\n")),Object(i.b)("p",null,"Download items with given DIDs. This function can also download datasets and wildcarded DIDs."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"items"),": List of dictionaries. Each dictionary describing an item to download. Keys:\ndid                    - DID string of this file (e.g. 'scope:file.name')\nfilters                - Filter to select DIDs for download. Optional if DID is given\nrse                    - Optional: rse name (e.g. 'CERN-PROD_DATADISK') or rse expression from where to download\nno_resolve_archives    - Optional: bool indicating whether archives should not be considered for download (Default: False)\nresolve_archives       - Deprecated: Use no_resolve_archives instead\nforce_scheme           - Optional: force a specific scheme to download this item. (Default: None)\nbase_dir               - Optional: base directory where the downloaded files will be stored. (Default: '.')\nno_subdir              - Optional: If true, files are written directly into base_dir. (Default: False)\nnrandom                - Optional: if the DID addresses a dataset, nrandom files will be randomly choosen for download from the dataset\nignore_checksum        - Optional: If true, skips the checksum validation between the downloaded file and the rucio catalouge. (Default: False)\ntransfer_timeout       - Optional: Timeout time for the download protocols. (Default: None)\ntransfer_speed_timeout - Optional: Minimum allowed transfer speed (in KBps). Ignored if transfer_timeout set. Otherwise, used to compute default timeout (Default: 500)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"num_threads"),": Suggestion of number of threads to use for the download. It will be lowered if it's too high."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"trace_custom_fields"),": Custom key value pairs to send with the traces."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"traces_copy_out"),": reference to an external list, where the traces should be uploaded")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"a list of dictionaries with an entry for each file, containing the input options, the did, and the clientState"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"InputValidationError"),": if one of the input items is in the wrong format"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"NoFilesDownloaded"),": if no files could be downloaded"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"NotAllFilesDownloaded"),": if not all files could be downloaded"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RucioException"),": if something unexpected went wrong during the download")),Object(i.b)("p",null,'\\<a name="downloadclient.DownloadClient.download_from_metalink_file"',">","\\</a",">"),Object(i.b)("h4",{id:"download_from_metalink_file"},"download","_","from","_","metalink","_","file"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | download_from_metalink_file(item, metalink_file_path, num_threads=2, trace_custom_fields={}, traces_copy_out=None)\n")),Object(i.b)("p",null,"Download items using a given metalink file."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"item"),": dictionary describing an item to download. Keys:\nbase_dir            - Optional: base directory where the downloaded files will be stored. (Default: '.')\nno_subdir           - Optional: If true, files are written directly into base_dir. (Default: False)\nignore_checksum     - Optional: If true, skips the checksum validation between the downloaded file and the rucio catalouge. (Default: False)\ntransfer_timeout    - Optional: Timeout time for the download protocols. (Default: None)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"num_threads"),": Suggestion of number of threads to use for the download. It will be lowered if it's too high."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"trace_custom_fields"),": Custom key value pairs to send with the traces."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"traces_copy_out"),": reference to an external list, where the traces should be uploaded")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"a list of dictionaries with an entry for each file, containing the input options, the did, and the clientState"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"InputValidationError"),": if one of the input items is in the wrong format"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"NoFilesDownloaded"),": if no files could be downloaded"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"NotAllFilesDownloaded"),": if not all files could be downloaded"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RucioException"),": if something unexpected went wrong during the download")),Object(i.b)("p",null,'\\<a name="downloadclient.DownloadClient.download_aria2c"',">","\\</a",">"),Object(i.b)("h4",{id:"download_aria2c"},"download","_","aria2c"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | download_aria2c(items, trace_custom_fields={}, filters={})\n")),Object(i.b)("p",null,"Uses aria2c to download the items with given DIDs. This function can also download datasets and wildcarded DIDs.\nIt only can download files that are available via https/davs.\nAria2c needs to be installed and X509_USER_PROXY needs to be set!"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"items"),": List of dictionaries. Each dictionary describing an item to download. Keys:\ndid                 - DID string of this file (e.g. 'scope:file.name'). Wildcards are not allowed\nrse                 - Optional: rse name (e.g. 'CERN-PROD_DATADISK') or rse expression from where to download\nbase_dir            - Optional: base directory where the downloaded files will be stored. (Default: '.')\nno_subdir           - Optional: If true, files are written directly into base_dir. (Default: False)\nnrandom             - Optional: if the DID addresses a dataset, nrandom files will be randomly choosen for download from the dataset\nignore_checksum     - Optional: If true, skips the checksum validation between the downloaded file and the rucio catalouge. (Default: False)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"trace_custom_fields"),": Custom key value pairs to send with the traces"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"filters"),": dictionary containing filter options")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"a list of dictionaries with an entry for each file, containing the input options, the did, and the clientState"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"InputValidationError"),": if one of the input items is in the wrong format"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"NoFilesDownloaded"),": if no files could be downloaded"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"NotAllFilesDownloaded"),": if not all files could be downloaded"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RucioException"),": if something went wrong during the download (e.g. aria2c could not be started)")),Object(i.b)("p",null,'\\<a name="rseclient"',">","\\</a",">"),Object(i.b)("h1",{id:"rseclient"},"rseclient"),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient"',">","\\</a",">"),Object(i.b)("h2",{id:"rseclient-objects"},"RSEClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class RSEClient(BaseClient)\n")),Object(i.b)("p",null,"RSE client class for working with rucio RSEs"),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.get_rse"',">","\\</a",">"),Object(i.b)("h4",{id:"get_rse"},"get","_","rse"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_rse(rse)\n")),Object(i.b)("p",null,"Returns details about the referred RSE."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": Name of the referred RSE")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"A dict containing all attributes of the referred RSE"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RSENotFound"),": if the referred RSE was not found in the database")),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.add_rse"',">","\\</a",">"),Object(i.b)("h4",{id:"add_rse"},"add","_","rse"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_rse(rse, **kwargs)\n")),Object(i.b)("p",null,"Sends the request to create a new RSE."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the name of the rse."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"deterministic"),": Boolean to know if the pfn is generated deterministically."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"volatile"),": Boolean for RSE cache."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"city"),": City for the RSE."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"region_code"),": The region code for the RSE."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"country_name"),": The country."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"continent"),": The continent."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"time_zone"),": Timezone."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"staging_area"),": Staging area."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ISP"),": Internet service provider."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse_type"),": RSE type."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"latitude"),": Latitude coordinate of RSE."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"longitude"),": Longitude coordinate of RSE."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ASN"),": Access service network."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"availability"),": Availability.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if location was created successfully else False."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Duplicate"),": if rse already exists.")),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.update_rse"',">","\\</a",">"),Object(i.b)("h4",{id:"update_rse"},"update","_","rse"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | update_rse(rse, parameters)\n")),Object(i.b)("p",null,"Update RSE properties like availability or name."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the name of the new rse."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"parameters"),": A dictionnary with property (name, read, write, delete as keys).")),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.delete_rse"',">","\\</a",">"),Object(i.b)("h4",{id:"delete_rse"},"delete","_","rse"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | delete_rse(rse)\n")),Object(i.b)("p",null,"Sends the request to delete a rse."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the name of the rse.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if location was created successfully else False."),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.list_rses"',">","\\</a",">"),Object(i.b)("h4",{id:"list_rses"},"list","_","rses"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_rses(rse_expression=None)\n")),Object(i.b)("p",null,"Sends the request to list all rucio locations(RSEs)."),Object(i.b)("p",null,":rse_expression: RSE Expression to use as filter."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"a list containing the names of all rucio locations."),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.add_rse_attribute"',">","\\</a",">"),Object(i.b)("h4",{id:"add_rse_attribute"},"add","_","rse","_","attribute"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_rse_attribute(rse, key, value)\n")),Object(i.b)("p",null,"Sends the request to add a RSE attribute."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the name of the rse."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"key"),": the attribute key."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"value"),": the attribute value.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if RSE attribute was created successfully else False."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Duplicate"),": if RSE attribute already exists.")),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.delete_rse_attribute"',">","\\</a",">"),Object(i.b)("h4",{id:"delete_rse_attribute"},"delete","_","rse","_","attribute"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | delete_rse_attribute(rse, key)\n")),Object(i.b)("p",null,"Sends the request to delete a RSE attribute."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"key"),": the attribute key.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if RSE attribute was deleted successfully else False."),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.list_rse_attributes"',">","\\</a",">"),Object(i.b)("h4",{id:"list_rse_attributes"},"list","_","rse","_","attributes"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_rse_attributes(rse)\n")),Object(i.b)("p",null,"Sends the request to get RSE attributes."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"A ",Object(i.b)("inlineCode",{parentName:"p"},"dict")," with the RSE attribute name/value pairs."),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.add_protocol"',">","\\</a",">"),Object(i.b)("h4",{id:"add_protocol"},"add","_","protocol"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_protocol(rse, params)\n")),Object(i.b)("p",null,"Sends the request to create a new protocol for the given RSE."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the name of the  rse."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scheme"),": identifier of this protocol"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"params"),": Attributes of the protocol. Supported are:\nhostname:       hostname for this protocol (default = localhost)\nport:           port for this protocol (default = 0)\nprefix:         string used as a prfeix for this protocol when generating the PFN (default = None)\nimpl:           qualified name of the implementation class for this protocol (mandatory)\nread:           integer representing the priority of this procotol for read operations (default = -1)\nwrite:          integer representing the priority of this procotol for write operations (default = -1)\ndelete:         integer representing the priority of this procotol for delete operations (default = -1)\nextended_attributes:  miscellaneous protocol specific information e.g. spacetoken for SRM (default = None)")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if protocol was created successfully else False."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Duplicate"),": if protocol with same hostname, port and protocol identifier\nalready exists for the given RSE."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RSENotFound"),": if the RSE doesn't exist."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"KeyNotFound"),": if params is missing manadtory attributes to create the\nprotocol."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccessDenied"),": if not authorized.")),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.get_protocols"',">","\\</a",">"),Object(i.b)("h4",{id:"get_protocols"},"get","_","protocols"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_protocols(rse, protocol_domain='ALL', operation=None, default=False, scheme=None)\n")),Object(i.b)("p",null,"Returns protocol information. Parameter comibantions are:\n(operation OR default) XOR protocol."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"protocol_domain"),": The scope of the protocol. Supported are 'LAN', 'WAN', and 'ALL' (as default)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"operation"),": The name of the requested operation (read, write, or delete).\nIf None, all operations are queried."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"default"),": Indicates if only the default operations should be returned."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scheme"),": The identifier of the requested protocol.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"A list with details about each matching protocol."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RSENotFound"),": if the RSE doesn't exist."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RSEProtocolNotSupported"),": if no matching protocol entry could be found."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RSEOperationNotSupported"),": if no matching protocol entry for the requested\noperation could be found.")),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.lfns2pfns"',">","\\</a",">"),Object(i.b)("h4",{id:"lfns2pfns"},"lfns2pfns"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | lfns2pfns(rse, lfns, protocol_domain='ALL', operation=None, scheme=None)\n")),Object(i.b)("p",null,"Returns PFNs that should be used at a RSE, corresponding to requested LFNs.\nThe PFNs are generated for the RSE ",Object(i.b)("em",{parentName:"p"},"regardless")," of whether a replica exists for the LFN."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"lfns"),": A list of LFN strings to translate to PFNs."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"protocol_domain"),": The scope of the protocol. Supported are 'LAN', 'WAN', and 'ALL' (as default)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"operation"),": The name of the requested operation (read, write, or delete).\nIf None, all operations are queried."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scheme"),": The identifier of the requested protocol (gsiftp, https, davs, etc).")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"A dictionary of LFN / PFN pairs."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RSENotFound"),": if the RSE doesn't exist."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RSEProtocolNotSupported"),": if no matching protocol entry could be found."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RSEOperationNotSupported"),": if no matching protocol entry for the requested\noperation could be found.")),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.delete_protocols"',">","\\</a",">"),Object(i.b)("h4",{id:"delete_protocols"},"delete","_","protocols"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | delete_protocols(rse, scheme, hostname=None, port=None)\n")),Object(i.b)("p",null,"Deletes matching protocols from RSE. Protocols using the same identifier can be\ndistinguished by hostname and port."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scheme"),": identifier of the protocol."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"hostname"),": hostname of the protocol."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"port"),": port of the protocol.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if success."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RSEProtocolNotSupported"),": if no matching protocol entry could be found."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RSENotFound"),": if the RSE doesn't exist."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccessDenied"),": if not authorized.")),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.update_protocols"',">","\\</a",">"),Object(i.b)("h4",{id:"update_protocols"},"update","_","protocols"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | update_protocols(rse, scheme, data, hostname=None, port=None)\n")),Object(i.b)("p",null,"Updates matching protocols from RSE. Protocol using the same identifier can be\ndistinguished by hostname and port."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scheme"),": identifier of the protocol."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"data"),": A dict providing the new values of the protocol attibutes.\nKeys must match column names in database."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"hostname"),": hostname of the protocol."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"port"),": port of the protocol.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if success."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RSEProtocolNotSupported"),": if no matching protocol entry could be found."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RSENotFound"),": if the RSE doesn't exist."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"KeyNotFound"),": if invalid data was provided for update."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccessDenied"),": if not authorized.")),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.swap_protocols"',">","\\</a",">"),Object(i.b)("h4",{id:"swap_protocols"},"swap","_","protocols"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | swap_protocols(rse, domain, operation, scheme_a, scheme_b)\n")),Object(i.b)("p",null,"Swaps the priorities of the provided operation."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"domain"),": the domain in which priorities should be swapped i.e. wan or lan."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"operation"),": the operation that should be swapped i.e. read, write, or delete."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scheme_a"),": the scheme of one of the two protocols to be swapped, e.g. srm."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scheme_b"),": the scheme of the other of the two protocols to be swapped, e.g. http.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if success."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RSEProtocolNotSupported"),": if no matching protocol entry could be found."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RSENotFound"),": if the RSE doesn't exist."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"KeyNotFound"),": if invalid data was provided for update."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccessDenied"),": if not authorized.")),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.add_qos_policy"',">","\\</a",">"),Object(i.b)("h4",{id:"add_qos_policy"},"add","_","qos","_","policy"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_qos_policy(rse, qos_policy)\n")),Object(i.b)("p",null,"Add a QoS policy from an RSE."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse_id"),": The id of the RSE."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"qos_policy"),": The QoS policy to add."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"session"),": The database session in use.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Duplicate"),": If the QoS policy already exists.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if successful, except otherwise."),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.delete_qos_policy"',">","\\</a",">"),Object(i.b)("h4",{id:"delete_qos_policy"},"delete","_","qos","_","policy"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | delete_qos_policy(rse, qos_policy)\n")),Object(i.b)("p",null,"Delete a QoS policy from an RSE."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse_id"),": The id of the RSE."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"qos_policy"),": The QoS policy to delete."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"session"),": The database session in use.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if successful, silent failure if QoS policy does not exist."),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.list_qos_policies"',">","\\</a",">"),Object(i.b)("h4",{id:"list_qos_policies"},"list","_","qos","_","policies"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_qos_policies(rse)\n")),Object(i.b)("p",null,"List all QoS policies of an RSE."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse_id"),": The id of the RSE."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"session"),": The database session in use.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"List containing all QoS policies."),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.set_rse_usage"',">","\\</a",">"),Object(i.b)("h4",{id:"set_rse_usage"},"set","_","rse","_","usage"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | set_rse_usage(rse, source, used, free)\n")),Object(i.b)("p",null,"Set RSE usage information."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"source"),": the information source, e.g. srm."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"used"),": the used space in bytes."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"free"),": the free in bytes.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if successful, otherwise false."),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.get_rse_usage"',">","\\</a",">"),Object(i.b)("h4",{id:"get_rse_usage"},"get","_","rse","_","usage"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_rse_usage(rse, filters=None)\n")),Object(i.b)("p",null,"Get RSE usage information."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"filters"),": dictionary of attributes by which the results should be filtered")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if successful, otherwise false."),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.list_rse_usage_history"',">","\\</a",">"),Object(i.b)("h4",{id:"list_rse_usage_history"},"list","_","rse","_","usage","_","history"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_rse_usage_history(rse, filters=None)\n")),Object(i.b)("p",null,"List RSE usage history information."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"filters"),": dictionary of attributes by which the results should be filtered.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"list of dictionnaries."),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.set_rse_limits"',">","\\</a",">"),Object(i.b)("h4",{id:"set_rse_limits"},"set","_","rse","_","limits"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | set_rse_limits(rse, name, value)\n")),Object(i.b)("p",null,"Set RSE limit information."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The name of the limit."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"value"),": The feature value.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if successful, otherwise false."),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.get_rse_limits"',">","\\</a",">"),Object(i.b)("h4",{id:"get_rse_limits"},"get","_","rse","_","limits"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_rse_limits(rse)\n")),Object(i.b)("p",null,"Get RSE limits."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if successful, otherwise false."),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.delete_rse_limits"',">","\\</a",">"),Object(i.b)("h4",{id:"delete_rse_limits"},"delete","_","rse","_","limits"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | delete_rse_limits(rse, name)\n")),Object(i.b)("p",null,"Delete RSE limit information."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The name of the limit.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if successful, otherwise false."),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.add_distance"',">","\\</a",">"),Object(i.b)("h4",{id:"add_distance"},"add","_","distance"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_distance(source, destination, parameters)\n")),Object(i.b)("p",null,"Add a src-dest distance."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"source"),": The source."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"destination"),": The destination."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"parameters"),": A dictionnary with property.")),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.update_distance"',">","\\</a",">"),Object(i.b)("h4",{id:"update_distance"},"update","_","distance"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | update_distance(source, destination, parameters)\n")),Object(i.b)("p",null,"Update distances with the given RSE ids."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"source"),": The source."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"destination"),": The destination."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"parameters"),": A dictionnary with property.")),Object(i.b)("p",null,'\\<a name="rseclient.RSEClient.get_distance"',">","\\</a",">"),Object(i.b)("h4",{id:"get_distance"},"get","_","distance"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_distance(source, destination)\n")),Object(i.b)("p",null,"Get distances between rses."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"source"),": The source RSE."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"destination"),": The destination RSE.")),Object(i.b)("p",null,":returns distance: List of dictionaries."),Object(i.b)("p",null,'\\<a name="credentialclient"',">","\\</a",">"),Object(i.b)("h1",{id:"credentialclient"},"credentialclient"),Object(i.b)("p",null,'\\<a name="credentialclient.CredentialClient"',">","\\</a",">"),Object(i.b)("h2",{id:"credentialclient-objects"},"CredentialClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class CredentialClient(BaseClient)\n")),Object(i.b)("p",null,"Credential client class for working with URL signing"),Object(i.b)("p",null,'\\<a name="credentialclient.CredentialClient.get_signed_url"',">","\\</a",">"),Object(i.b)("h4",{id:"get_signed_url"},"get","_","signed","_","url"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_signed_url(rse, service, operation, url, lifetime=3600)\n")),Object(i.b)("p",null,"Return a signed version of the given URL for the given operation."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The name of the RSE the URL points to."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"service"),": The service the URL points to (gcs, s3, swift)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"operation"),": The desired operation (read, write, delete)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"url"),": The URL to sign"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"lifetime"),": The desired lifetime of the URL in seconds")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"The signed URL string"),Object(i.b)("p",null,'\\<a name="lockclient"',">","\\</a",">"),Object(i.b)("h1",{id:"lockclient"},"lockclient"),Object(i.b)("p",null,'\\<a name="lockclient.LockClient"',">","\\</a",">"),Object(i.b)("h2",{id:"lockclient-objects"},"LockClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class LockClient(BaseClient)\n")),Object(i.b)("p",null,"Lock client class for working with rucio locks"),Object(i.b)("p",null,'\\<a name="lockclient.LockClient.get_dataset_locks"',">","\\</a",">"),Object(i.b)("h4",{id:"get_dataset_locks"},"get","_","dataset","_","locks"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_dataset_locks(scope, name)\n")),Object(i.b)("p",null,"Get a dataset locks of the specified dataset."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": the scope of the did of the locks to list."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": the name of the did of the locks to list.")),Object(i.b)("p",null,'\\<a name="lockclient.LockClient.get_dataset_locks_by_rse"',">","\\</a",">"),Object(i.b)("h4",{id:"get_dataset_locks_by_rse"},"get","_","dataset","_","locks","_","by","_","rse"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_dataset_locks_by_rse(rse)\n")),Object(i.b)("p",null,"Get all dataset locks of the specified rse."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the rse of the locks to list.")),Object(i.b)("p",null,'\\<a name="uploadclient"',">","\\</a",">"),Object(i.b)("h1",{id:"uploadclient"},"uploadclient"),Object(i.b)("p",null,'\\<a name="uploadclient.UploadClient"',">","\\</a",">"),Object(i.b)("h2",{id:"uploadclient-objects"},"UploadClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class UploadClient()\n")),Object(i.b)("p",null,'\\<a name="uploadclient.UploadClient.',Object(i.b)("strong",{parentName:"p"},"init"),'"',">","\\</a",">"),Object(i.b)("h4",{id:"__init__-3"},"_","_","init","_","_"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | __init__(_client=None, logger=None, tracing=True)\n")),Object(i.b)("p",null,"Initialises the basic settings for an UploadClient object"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"_client"),": - Optional: rucio.client.client.Client object. If None, a new object will be created."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"logger"),": - Optional: logging.Logger object. If None, default logger will be used.")),Object(i.b)("p",null,'\\<a name="uploadclient.UploadClient.upload"',">","\\</a",">"),Object(i.b)("h4",{id:"upload"},"upload"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | upload(items, summary_file_path=None, traces_copy_out=None)\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"items"),": List of dictionaries. Each dictionary describing a file to upload. Keys:\npath                  - path of the file that will be uploaded\nrse                   - rse expression/name (e.g. 'CERN-PROD_DATADISK') where to upload the file\ndid_scope             - Optional: custom did scope (Default: user.\\<account",">",")\ndid_name              - Optional: custom did name (Default: name of the file)\ndataset_scope         - Optional: custom dataset scope\ndataset_name          - Optional: custom dataset name\nforce_scheme          - Optional: force a specific scheme (if PFN upload this will be overwritten) (Default: None)\npfn                   - Optional: use a given PFN (this sets no_register to True, and no_register becomes mandatory)\nno_register           - Optional: if True, the file will not be registered in the rucio catalogue\nregister_after_upload - Optional: if True, the file will be registered after successful upload\nlifetime              - Optional: the lifetime of the file after it was uploaded\ntransfer_timeout      - Optional: time after the upload will be aborted\nguid                  - Optional: guid of the file"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"summary_file_path"),": Optional: a path where a summary in form of a json file will be stored"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"traces_copy_out"),": reference to an external list, where the traces should be uploaded")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"0 on success"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"InputValidationError"),": if any input arguments are in a wrong format"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RSEBlacklisted"),": if a given RSE is not available for writing"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"NoFilesUploaded"),": if no files were successfully uploaded"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"NotAllFilesUploaded"),": if not all files were successfully uploaded")),Object(i.b)("p",null,'\\<a name="',Object(i.b)("strong",{parentName:"p"},"init"),'"',">","\\</a",">"),Object(i.b)("h1",{id:"__init__-4"},"_","_","init","_","_"),Object(i.b)("p",null,'\\<a name="baseclient"',">","\\</a",">"),Object(i.b)("h1",{id:"baseclient"},"baseclient"),Object(i.b)("p",null,"Client class for callers of the Rucio system"),Object(i.b)("p",null,'\\<a name="baseclient.back_off"',">","\\</a",">"),Object(i.b)("h4",{id:"back_off"},"back","_","off"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"back_off(retry_number, reason)\n")),Object(i.b)("p",null,"Sleep a certain amount of time which increases with the retry count"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"retry_number"),": the retry iteration"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"reason"),": the reason to backoff which will be shown to the user")),Object(i.b)("p",null,'\\<a name="baseclient.choice"',">","\\</a",">"),Object(i.b)("h4",{id:"choice"},"choice"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"@REGION.cache_on_arguments(namespace='host_to_choose')\nchoice(hosts)\n")),Object(i.b)("p",null,"Select randomly a host"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"hosts"),": Lost of hosts")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"A randomly selected host."),Object(i.b)("p",null,'\\<a name="baseclient.BaseClient"',">","\\</a",">"),Object(i.b)("h2",{id:"baseclient-objects"},"BaseClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class BaseClient(object)\n")),Object(i.b)("p",null,"Main client class for accessing Rucio resources. Handles the authentication."),Object(i.b)("p",null,'\\<a name="baseclient.BaseClient.',Object(i.b)("strong",{parentName:"p"},"init"),'"',">","\\</a",">"),Object(i.b)("h4",{id:"__init__-5"},"_","_","init","_","_"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | __init__(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None)\n")),Object(i.b)("p",null,"Constructor of the BaseClient."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rucio_host"),": The address of the rucio server, if None it is read from the config file."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rucio_port"),": The port of the rucio server, if None it is read from the config file."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"auth_host"),": The address of the rucio authentication server, if None it is read from the config file."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"auth_port"),": The port of the rucio authentication server, if None it is read from the config file."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account to authenticate to rucio."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"use_ssl"),": Enable or disable ssl for commucation. Default is enabled."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ca_cert"),": The path to the rucio server certificate."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"auth_type"),": The type of authentication (e.g.: 'userpass', 'kerberos' ...)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"creds"),": Dictionary with credentials needed for authentication."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"user_agent"),": Indicates the client."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"vo"),": The VO to authenticate into.")),Object(i.b)("p",null,'\\<a name="replicaclient"',">","\\</a",">"),Object(i.b)("h1",{id:"replicaclient"},"replicaclient"),Object(i.b)("p",null,'\\<a name="replicaclient.ReplicaClient"',">","\\</a",">"),Object(i.b)("h2",{id:"replicaclient-objects"},"ReplicaClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class ReplicaClient(BaseClient)\n")),Object(i.b)("p",null,"Replica client class for working with replicas"),Object(i.b)("p",null,'\\<a name="replicaclient.ReplicaClient.declare_bad_file_replicas"',">","\\</a",">"),Object(i.b)("h4",{id:"declare_bad_file_replicas"},"declare","_","bad","_","file","_","replicas"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | declare_bad_file_replicas(pfns, reason)\n")),Object(i.b)("p",null,"Declare a list of bad replicas."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"pfns"),": The list of PFNs."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"reason"),": The reason of the loss.")),Object(i.b)("p",null,'\\<a name="replicaclient.ReplicaClient.declare_bad_did_replicas"',">","\\</a",">"),Object(i.b)("h4",{id:"declare_bad_did_replicas"},"declare","_","bad","_","did","_","replicas"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | declare_bad_did_replicas(rse, dids, reason)\n")),Object(i.b)("p",null,"Declare a list of bad replicas."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The RSE where the bad replicas reside"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dids"),": The DIDs of the bad replicas"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"reason"),": The reason of the loss.")),Object(i.b)("p",null,'\\<a name="replicaclient.ReplicaClient.declare_suspicious_file_replicas"',">","\\</a",">"),Object(i.b)("h4",{id:"declare_suspicious_file_replicas"},"declare","_","suspicious","_","file","_","replicas"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | declare_suspicious_file_replicas(pfns, reason)\n")),Object(i.b)("p",null,"Declare a list of bad replicas."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"pfns"),": The list of PFNs."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"reason"),": The reason of the loss.")),Object(i.b)("p",null,'\\<a name="replicaclient.ReplicaClient.get_did_from_pfns"',">","\\</a",">"),Object(i.b)("h4",{id:"get_did_from_pfns"},"get","_","did","_","from","_","pfns"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_did_from_pfns(pfns, rse=None)\n")),Object(i.b)("p",null,"Get the DIDs associated to a PFN on one given RSE"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"pfns"),": The list of PFNs."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"A list of dictionaries {pfn: {'scope': scope, 'name': name}}"),Object(i.b)("p",null,'\\<a name="replicaclient.ReplicaClient.list_replicas"',">","\\</a",">"),Object(i.b)("h4",{id:"list_replicas"},"list","_","replicas"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_replicas(dids, schemes=None, unavailable=False, ignore_availability=True, all_states=False, metalink=False, rse_expression=None, client_location=None, sort=None, domain=None, signature_lifetime=None, nrandom=None, resolve_archives=True, resolve_parents=False, updated_after=None)\n")),Object(i.b)("p",null,"List file replicas for a list of data identifiers (DIDs)."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dids"),": The list of data identifiers (DIDs) like :\n","[{'scope': \\<scope1",">",", 'name': \\<name1",">","}, {'scope': \\<scope2",">",", 'name': \\<name2",">","}, ...]"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"schemes"),": A list of schemes to filter the replicas. (e.g. file, http, ...)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"unavailable"),": Also include unavailable replicas in the list (deprecated)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ignore_availability"),": Also include blacklisted replicas into the list"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"metalink"),": ",Object(i.b)("inlineCode",{parentName:"li"},"False")," (default) retrieves as JSON,\n",Object(i.b)("inlineCode",{parentName:"li"},"True")," retrieves as metalink4+xml."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse_expression"),": The RSE expression to restrict replicas on a set of RSEs."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"client_location"),": Client location dictionary for PFN modification {'ip', 'fqdn', 'site'}"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"sort"),": Sort the replicas: ",Object(i.b)("inlineCode",{parentName:"li"},"geoip")," - based on src/dst IP topographical distance\n",Object(i.b)("inlineCode",{parentName:"li"},"closeness")," - based on src/dst closeness\n",Object(i.b)("inlineCode",{parentName:"li"},"dynamic")," - Rucio Dynamic Smart Sort (tm)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"domain"),": Define the domain. None is fallback to 'wan', otherwise 'wan, 'lan', or 'all'"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"signature_lifetime"),": If supported, in seconds, restrict the lifetime of the signed PFN."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"nrandom"),": pick N random replicas. If the initial number of replicas is smaller than N, returns all replicas."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"resolve_archives"),": When set to True, find archives which contain the replicas."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"resolve_parents"),": When set to True, find all parent datasets which contain the replicas."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"updated_after"),": epoch timestamp or datetime object (UTC time), only return replicas updated after this time")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"A list of dictionaries with replica information."),Object(i.b)("p",null,'\\<a name="replicaclient.ReplicaClient.list_suspicious_replicas"',">","\\</a",">"),Object(i.b)("h4",{id:"list_suspicious_replicas"},"list","_","suspicious","_","replicas"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_suspicious_replicas(rse_expression=None, younger_than=None, nattempts=None)\n")),Object(i.b)("p",null,"List file replicas tagged as suspicious."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse_expression"),": The RSE expression to restrict replicas on a set of RSEs."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"younger_than"),": Datetime object to select the replicas which were declared since younger_than date. Default value = 10 days ago."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"nattempts"),": The minimum number of replica appearances in the bad_replica DB table from younger_than date. Default value = 0."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"state"),": State of the replica, either 'BAD' or 'SUSPICIOUS'. No value returns replicas with either state.")),Object(i.b)("p",null,'\\<a name="replicaclient.ReplicaClient.add_replica"',">","\\</a",">"),Object(i.b)("h4",{id:"add_replica"},"add","_","replica"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_replica(rse, scope, name, bytes, adler32, pfn=None, md5=None, meta={})\n")),Object(i.b)("p",null,"Add file replicas to a RSE."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope of the file."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The name of the file."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"bytes"),": The size in bytes."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"adler32"),": adler32 checksum."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"pfn"),": PFN of the file for non deterministic RSE."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"md5"),": md5 checksum."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"meta"),": Metadata attributes.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if files were created successfully."),Object(i.b)("p",null,'\\<a name="replicaclient.ReplicaClient.add_replicas"',">","\\</a",">"),Object(i.b)("h4",{id:"add_replicas"},"add","_","replicas"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_replicas(rse, files, ignore_availability=True)\n")),Object(i.b)("p",null,"Bulk add file replicas to a RSE."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"files"),": The list of files. This is a list of DIDs like :\n","[{'scope': \\<scope1",">",", 'name': \\<name1",">","}, {'scope': \\<scope2",">",", 'name': \\<name2",">","}, ...]"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ignore_availability"),": Ignore the RSE blacklisting.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if files were created successfully."),Object(i.b)("p",null,'\\<a name="replicaclient.ReplicaClient.delete_replicas"',">","\\</a",">"),Object(i.b)("h4",{id:"delete_replicas"},"delete","_","replicas"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | delete_replicas(rse, files, ignore_availability=True)\n")),Object(i.b)("p",null,"Bulk delete file replicas from a RSE."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"files"),": The list of files. This is a list of DIDs like :\n","[{'scope': \\<scope1",">",", 'name': \\<name1",">","}, {'scope': \\<scope2",">",", 'name': \\<name2",">","}, ...]"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ignore_availability"),": Ignore the RSE blacklisting.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if files have been deleted successfully."),Object(i.b)("p",null,'\\<a name="replicaclient.ReplicaClient.update_replicas_states"',">","\\</a",">"),Object(i.b)("h4",{id:"update_replicas_states"},"update","_","replicas","_","states"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | update_replicas_states(rse, files)\n")),Object(i.b)("p",null,"Bulk update the file replicas states from a RSE."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the RSE name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"files"),": The list of files. This is a list of DIDs like :\n","[{'scope': \\<scope1",">",", 'name': \\<name1",">",", 'state': \\<state1",">","}, {'scope': \\<scope2",">",", 'name': \\<name2",">",", 'state': \\<state2",">","}, ...]",",\nwhere a state value can be either of:\n'A' (available)\n'S' (suspicious)\n'U' (unavailable)\n'R' (recovered)\n'B' (bad)\n'L' (lost)\n'D' (deleted)")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if replica states have been updated successfully, otherwise an exception is raised."),Object(i.b)("p",null,'\\<a name="replicaclient.ReplicaClient.list_dataset_replicas"',">","\\</a",">"),Object(i.b)("h4",{id:"list_dataset_replicas"},"list","_","dataset","_","replicas"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_dataset_replicas(scope, name, deep=False)\n")),Object(i.b)("p",null,"List dataset replicas for a did (scope:name)."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope of the dataset."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The name of the dataset."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"deep"),": Lookup at the file level.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"A list of dict dataset replicas."),Object(i.b)("p",null,'\\<a name="replicaclient.ReplicaClient.list_dataset_replicas_bulk"',">","\\</a",">"),Object(i.b)("h4",{id:"list_dataset_replicas_bulk"},"list","_","dataset","_","replicas","_","bulk"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_dataset_replicas_bulk(dids)\n")),Object(i.b)("p",null,"List dataset replicas for a did (scope:name)."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dids"),": The list of DIDs of the datasets.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"A list of dict dataset replicas."),Object(i.b)("p",null,'\\<a name="replicaclient.ReplicaClient.list_dataset_replicas_vp"',">","\\</a",">"),Object(i.b)("h4",{id:"list_dataset_replicas_vp"},"list","_","dataset","_","replicas","_","vp"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_dataset_replicas_vp(scope, name, deep=False)\n")),Object(i.b)("p",null,"List dataset replicas for a DID (scope:name) using the\nVirtual Placement service."),Object(i.b)("p",null,"NOTICE: This is an RnD function and might change or go away at any time."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope of the dataset."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The name of the dataset."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"deep"),": Lookup at the file level.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"If VP exists a list of dicts of sites"),Object(i.b)("p",null,'\\<a name="replicaclient.ReplicaClient.list_datasets_per_rse"',">","\\</a",">"),Object(i.b)("h4",{id:"list_datasets_per_rse"},"list","_","datasets","_","per","_","rse"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_datasets_per_rse(rse, filters=None, limit=None)\n")),Object(i.b)("p",null,"List datasets at a RSE."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": the rse name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"filters"),": dictionary of attributes by which the results should be filtered."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"limit"),": limit number.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"A list of dict dataset replicas."),Object(i.b)("p",null,'\\<a name="replicaclient.ReplicaClient.add_bad_pfns"',">","\\</a",">"),Object(i.b)("h4",{id:"add_bad_pfns"},"add","_","bad","_","pfns"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_bad_pfns(pfns, reason, state, expires_at)\n")),Object(i.b)("p",null,"Declare a list of bad replicas."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"pfns"),": The list of PFNs."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"reason"),": The reason of the loss."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"state"),": The state of the replica. Either BAD, SUSPICIOUS, TEMPORARY_UNAVAILABLE"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"expires_at"),": Specify a timeout for the TEMPORARY_UNAVAILABLE replicas. None for BAD files.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if PFNs were created successfully."),Object(i.b)("p",null,'\\<a name="replicaclient.ReplicaClient.set_tombstone"',">","\\</a",">"),Object(i.b)("h4",{id:"set_tombstone"},"set","_","tombstone"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | set_tombstone(replicas)\n")),Object(i.b)("p",null,"Set a tombstone on a list of replicas."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"replicas"),": list of replicas.")),Object(i.b)("p",null,'\\<a name="accountclient"',">","\\</a",">"),Object(i.b)("h1",{id:"accountclient"},"accountclient"),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient"',">","\\</a",">"),Object(i.b)("h2",{id:"accountclient-objects"},"AccountClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class AccountClient(BaseClient)\n")),Object(i.b)("p",null,"Account client class for working with rucio accounts"),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.add_account"',">","\\</a",">"),Object(i.b)("h4",{id:"add_account"},"add","_","account"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_account(account, type, email)\n")),Object(i.b)("p",null,"Sends the request to create a new account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": the name of the account."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"type"),": The account type"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"email"),": The Email address associated with the account.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if account was created successfully else False."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Duplicate"),": if account already exists.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.delete_account"',">","\\</a",">"),Object(i.b)("h4",{id:"delete_account"},"delete","_","account"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | delete_account(account)\n")),Object(i.b)("p",null,"Sends the request to disable an account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": the name of the account.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True is account was disabled successfully. False otherwise."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccountNotFound"),": if account doesn't exist.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.get_account"',">","\\</a",">"),Object(i.b)("h4",{id:"get_account"},"get","_","account"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_account(account)\n")),Object(i.b)("p",null,"Sends the request to get information about a given account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": the name of the account.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"a list of attributes for the account. None if failure."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccountNotFound"),": if account doesn't exist.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.update_account"',">","\\</a",">"),Object(i.b)("h4",{id:"update_account"},"update","_","account"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | update_account(account, key, value)\n")),Object(i.b)("p",null,"Update a property of an account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": Name of the account."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"key"),": Account property like status."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"value"),": Property value.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.list_accounts"',">","\\</a",">"),Object(i.b)("h4",{id:"list_accounts"},"list","_","accounts"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_accounts(account_type=None, identity=None, filters=None)\n")),Object(i.b)("p",null,"Sends the request to list all rucio accounts."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"type"),": The account type"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"identity"),": The identity key name. For example x509 DN, or a username."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"filters"),": A dictionnary key:account attribute to use for the filtering")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"a list containing account info dictionary for all rucio accounts."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccountNotFound"),": if account doesn't exist.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.whoami"',">","\\</a",">"),Object(i.b)("h4",{id:"whoami"},"whoami"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | whoami()\n")),Object(i.b)("p",null,"Get information about account whose token is used"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"a list of attributes for the account. None if failure."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccountNotFound"),": if account doesn't exist.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.add_identity"',">","\\</a",">"),Object(i.b)("h4",{id:"add_identity"},"add","_","identity"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_identity(account, identity, authtype, email, default=False, password=None)\n")),Object(i.b)("p",null,"Adds a membership association between identity and account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"identity"),": The identity key name. For example x509 DN, or a username."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"authtype"),": The type of the authentication (x509, gss, userpass)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"default"),": If True, the account should be used by default with the provided identity."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"email"),": The Email address associated with the identity."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"password"),": Password if authtype is userpass.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.del_identity"',">","\\</a",">"),Object(i.b)("h4",{id:"del_identity"},"del","_","identity"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | del_identity(account, identity, authtype)\n")),Object(i.b)("p",null,"Delete an identity's membership association with an account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"identity"),": The identity key name. For example x509 DN, or a username."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"authtype"),": The type of the authentication (x509, gss, userpass)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"default"),": If True, the account should be used by default with the provided identity.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.list_identities"',">","\\</a",">"),Object(i.b)("h4",{id:"list_identities"},"list","_","identities"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_identities(account)\n")),Object(i.b)("p",null,"List all identities on an account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account name.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.list_account_rules"',">","\\</a",">"),Object(i.b)("h4",{id:"list_account_rules"},"list","_","account","_","rules"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_account_rules(account)\n")),Object(i.b)("p",null,"List the associated rules of an account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account name.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.get_account_limits"',">","\\</a",">"),Object(i.b)("h4",{id:"get_account_limits"},"get","_","account","_","limits"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_account_limits(account, rse_expression, locality)\n")),Object(i.b)("p",null,"Return the correct account limits for the given locality."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse_expression"),": Valid RSE expression"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"locality"),": The scope of the account limit. 'local' or 'global'.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.get_global_account_limit"',">","\\</a",">"),Object(i.b)("h4",{id:"get_global_account_limit"},"get","_","global","_","account","_","limit"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_global_account_limit(account, rse_expression)\n")),Object(i.b)("p",null,"List the account limit for the specific RSE expression."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse_expression"),": The rse expression.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.get_global_account_limits"',">","\\</a",">"),Object(i.b)("h4",{id:"get_global_account_limits"},"get","_","global","_","account","_","limits"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_global_account_limits(account)\n")),Object(i.b)("p",null,"List all RSE expression limits of this account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account name.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.get_local_account_limits"',">","\\</a",">"),Object(i.b)("h4",{id:"get_local_account_limits"},"get","_","local","_","account","_","limits"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_local_account_limits(account)\n")),Object(i.b)("p",null,"List the account rse limits of this account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account name.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.get_local_account_limit"',">","\\</a",">"),Object(i.b)("h4",{id:"get_local_account_limit"},"get","_","local","_","account","_","limit"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_local_account_limit(account, rse)\n")),Object(i.b)("p",null,"List the account rse limits of this account for the specific rse."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The rse name.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.get_local_account_usage"',">","\\</a",">"),Object(i.b)("h4",{id:"get_local_account_usage"},"get","_","local","_","account","_","usage"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_local_account_usage(account, rse=None)\n")),Object(i.b)("p",null,"List the account usage for one or all rses of this account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The rse name.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.get_global_account_usage"',">","\\</a",">"),Object(i.b)("h4",{id:"get_global_account_usage"},"get","_","global","_","account","_","usage"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_global_account_usage(account, rse_expression=None)\n")),Object(i.b)("p",null,"List the account usage for one or all RSE expressions of this account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse_expression"),": The rse expression.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.get_account_usage_history"',">","\\</a",">"),Object(i.b)("h4",{id:"get_account_usage_history"},"get","_","account","_","usage","_","history"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_account_usage_history(account, rse)\n")),Object(i.b)("p",null,"List the account usage history of this account on rse."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The rse name.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.list_account_attributes"',">","\\</a",">"),Object(i.b)("h4",{id:"list_account_attributes"},"list","_","account","_","attributes"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_account_attributes(account)\n")),Object(i.b)("p",null,"List the attributes for an account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account name.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.add_account_attribute"',">","\\</a",">"),Object(i.b)("h4",{id:"add_account_attribute"},"add","_","account","_","attribute"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_account_attribute(account, key, value)\n")),Object(i.b)("p",null,"Adds an attribute to an account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"key"),": The attribute key."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"value"),": The attribute value.")),Object(i.b)("p",null,'\\<a name="accountclient.AccountClient.delete_account_attribute"',">","\\</a",">"),Object(i.b)("h4",{id:"delete_account_attribute"},"delete","_","account","_","attribute"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | delete_account_attribute(account, key)\n")),Object(i.b)("p",null,"Delete an attribute for an account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"key"),": The attribute key.")),Object(i.b)("p",null,'\\<a name="subscriptionclient"',">","\\</a",">"),Object(i.b)("h1",{id:"subscriptionclient"},"subscriptionclient"),Object(i.b)("p",null,'\\<a name="subscriptionclient.SubscriptionClient"',">","\\</a",">"),Object(i.b)("h2",{id:"subscriptionclient-objects"},"SubscriptionClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class SubscriptionClient(BaseClient)\n")),Object(i.b)("p",null,"SubscriptionClient class for working with subscriptions"),Object(i.b)("p",null,'\\<a name="subscriptionclient.SubscriptionClient.add_subscription"',">","\\</a",">"),Object(i.b)("h4",{id:"add_subscription"},"add","_","subscription"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_subscription(name, account, filter, replication_rules, comments, lifetime, retroactive, dry_run, priority=3)\n")),Object(i.b)("p",null,"Adds a new subscription which will be verified against every new added file and dataset"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": Name of the subscription\n:type:  String"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": Account identifier\n:type account:  String"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"filter"),": Dictionary of attributes by which the input data should be filtered\n",Object(i.b)("strong",{parentName:"li"},"Example"),": ",Object(i.b)("inlineCode",{parentName:"li"},"{'dsn': 'data11_hi*.express_express.*,data11_hi*physics_MinBiasOverlay*', 'account': 'tzero'}"),"\n:type filter:  Dict"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"replication_rules"),": Replication rules to be set : Dictionary with keys copies, rse_expression, weight, rse_expression\n:type replication_rules:  Dict"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"comments"),": Comments for the subscription\n:type comments:  String"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"lifetime"),": Subscription's lifetime (days); False if subscription has no lifetime\n:type lifetime:  Integer or False"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"retroactive"),": Flag to know if the subscription should be applied on previous data\n:type retroactive:  Boolean"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dry_run"),": Just print the subscriptions actions without actually executing them (Useful if retroactive flag is set)\n:type dry_run:  Boolean"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"priority"),": The priority of the subscription (3 by default)\n:type priority: Integer")),Object(i.b)("p",null,'\\<a name="subscriptionclient.SubscriptionClient.list_subscriptions"',">","\\</a",">"),Object(i.b)("h4",{id:"list_subscriptions"},"list","_","subscriptions"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_subscriptions(name=None, account=None)\n")),Object(i.b)("p",null,"Returns a dictionary with the subscription information :\nExamples: ",Object(i.b)("inlineCode",{parentName:"p"},"{'status': 'INACTIVE/ACTIVE/BROKEN', 'last_modified_date': ...}")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": Name of the subscription\n:type:  String"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": Account identifier\n:type account:  String")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"Dictionary containing subscription parameter\n:rtype:   Dict\n:raises: exception.NotFound if subscription is not found"),Object(i.b)("p",null,'\\<a name="subscriptionclient.SubscriptionClient.update_subscription"',">","\\</a",">"),Object(i.b)("h4",{id:"update_subscription"},"update","_","subscription"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | update_subscription(name, account=None, filter=None, replication_rules=None, comments=None, lifetime=None, retroactive=None, dry_run=None, priority=None)\n")),Object(i.b)("p",null,"Updates a subscription"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": Name of the subscription\n:type:  String"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": Account identifier\n:type account:  String"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"filter"),": Dictionary of attributes by which the input data should be filtered\n",Object(i.b)("strong",{parentName:"li"},"Example"),": ",Object(i.b)("inlineCode",{parentName:"li"},"{'dsn': 'data11_hi*.express_express.*,data11_hi*physics_MinBiasOverlay*', 'account': 'tzero'}"),"\n:type filter:  Dict"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"replication_rules"),": Replication rules to be set : Dictionary with keys copies, rse_expression, weight, rse_expression\n:type replication_rules:  Dict"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"comments"),": Comments for the subscription\n:type comments:  String"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"lifetime"),": Subscription's lifetime (days); False if subscription has no lifetime\n:type lifetime:  Integer or False"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"retroactive"),": Flag to know if the subscription should be applied on previous data\n:type retroactive:  Boolean"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dry_run"),": Just print the subscriptions actions without actually executing them (Useful if retroactive flag is set)\n:type dry_run:  Boolean"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"priority"),": The priority of the subscription\n:type priority: Integer\n:raises: exception.NotFound if subscription is not found")),Object(i.b)("p",null,'\\<a name="subscriptionclient.SubscriptionClient.list_subscription_rules"',">","\\</a",">"),Object(i.b)("h4",{id:"list_subscription_rules"},"list","_","subscription","_","rules"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_subscription_rules(account, name)\n")),Object(i.b)("p",null,"List the associated rules of a subscription."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": Account of the subscription."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": Name of the subscription.")),Object(i.b)("p",null,'\\<a name="scopeclient"',">","\\</a",">"),Object(i.b)("h1",{id:"scopeclient"},"scopeclient"),Object(i.b)("p",null,'\\<a name="scopeclient.ScopeClient"',">","\\</a",">"),Object(i.b)("h2",{id:"scopeclient-objects"},"ScopeClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class ScopeClient(BaseClient)\n")),Object(i.b)("p",null,"Scope client class for working with rucio scopes"),Object(i.b)("p",null,'\\<a name="scopeclient.ScopeClient.add_scope"',">","\\</a",">"),Object(i.b)("h4",{id:"add_scope"},"add","_","scope"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_scope(account, scope)\n")),Object(i.b)("p",null,"Sends the request to add a new scope."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": the name of the account to add the scope to."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": the name of the new scope.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if scope was created successfully."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"Duplicate"),": if scope already exists."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccountNotFound"),": if account doesn't exist.")),Object(i.b)("p",null,'\\<a name="scopeclient.ScopeClient.list_scopes"',">","\\</a",">"),Object(i.b)("h4",{id:"list_scopes"},"list","_","scopes"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_scopes()\n")),Object(i.b)("p",null,"Sends the request to list all scopes."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"a list containing the names of all scopes."),Object(i.b)("p",null,'\\<a name="scopeclient.ScopeClient.list_scopes_for_account"',">","\\</a",">"),Object(i.b)("h4",{id:"list_scopes_for_account"},"list","_","scopes","_","for","_","account"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_scopes_for_account(account)\n")),Object(i.b)("p",null,"Sends the request to list all scopes for a rucio account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": the rucio account to list scopes for.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"a list containing the names of all scopes for a rucio account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccountNotFound"),": if account doesn't exist."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ScopeNotFound"),": if no scopes exist for account.")),Object(i.b)("p",null,'\\<a name="configclient"',">","\\</a",">"),Object(i.b)("h1",{id:"configclient"},"configclient"),Object(i.b)("p",null,'\\<a name="configclient.ConfigClient"',">","\\</a",">"),Object(i.b)("h2",{id:"configclient-objects"},"ConfigClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class ConfigClient(BaseClient)\n")),Object(i.b)("p",null,"Client class for working with the configuration"),Object(i.b)("p",null,'\\<a name="configclient.ConfigClient.get_config"',">","\\</a",">"),Object(i.b)("h4",{id:"get_config"},"get","_","config"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_config(section=None, option=None)\n")),Object(i.b)("p",null,"Sends the request to get the matching configuration."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"section"),": the optional name of the section."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"option"),": the optional option within the section.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"dictionary containing the configuration."),Object(i.b)("p",null,'\\<a name="configclient.ConfigClient.set_config_option"',">","\\</a",">"),Object(i.b)("h4",{id:"set_config_option"},"set","_","config","_","option"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | set_config_option(section, option, value, use_body_for_params=True)\n")),Object(i.b)("p",null,"Sends the request to create or set an option within a section. Missing sections will be created."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"section"),": the name of the section."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"option"),": the name of the option."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"value"),": the value to set on the config option"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"use_body_for_params"),': send parameters in a json-encoded request body instead of url-encoded\nTODO: remove this parameter\nThe format of the /config endpoint was recently changed. We migrated from performing a PUT on\n"/config/\\<section',">","/\\<option",">","/\\<value",">",'" to sending the parameters using a json-encoded body.\nThis was done to fix multiple un-wanted side effects related to how the middleware treats\nvalues encoded in a path.\nFor a smooth transition, we allow both cases for now, but we should migrate to only passing\nvalues via the request body.')),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if option was removed successfully. False otherwise."),Object(i.b)("p",null,'\\<a name="configclient.ConfigClient.delete_config_option"',">","\\</a",">"),Object(i.b)("h4",{id:"delete_config_option"},"delete","_","config","_","option"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | delete_config_option(section, option)\n")),Object(i.b)("p",null,"Sends the request to remove an option from a section"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"section"),": the name of the section."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"option"),": the name of the option.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if option was removed successfully. False otherwise."),Object(i.b)("p",null,'\\<a name="importclient"',">","\\</a",">"),Object(i.b)("h1",{id:"importclient"},"importclient"),Object(i.b)("p",null,'\\<a name="importclient.ImportClient"',">","\\</a",">"),Object(i.b)("h2",{id:"importclient-objects"},"ImportClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class ImportClient(BaseClient)\n")),Object(i.b)("p",null,"RSE client class for importing data into Rucio"),Object(i.b)("p",null,'\\<a name="importclient.ImportClient.import_data"',">","\\</a",">"),Object(i.b)("h4",{id:"import_data"},"import","_","data"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | import_data(data)\n")),Object(i.b)("p",null,"Imports data into Rucio."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"data"),": a dict containing data to be imported into Rucio.")),Object(i.b)("p",null,'\\<a name="didclient"',">","\\</a",">"),Object(i.b)("h1",{id:"didclient"},"didclient"),Object(i.b)("p",null,'\\<a name="didclient.DIDClient"',">","\\</a",">"),Object(i.b)("h2",{id:"didclient-objects"},"DIDClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class DIDClient(BaseClient)\n")),Object(i.b)("p",null,"DataIdentifier client class for working with data identifiers"),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.list_dids"',">","\\</a",">"),Object(i.b)("h4",{id:"list_dids"},"list","_","dids"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_dids(scope, filters, type='collection', long=False, recursive=False)\n")),Object(i.b)("p",null,"List all data identifiers in a scope which match a given pattern."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"filters"),": A dictionary of key/value pairs like {'type': 'dataset', 'scope': 'test'}."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"type"),": The type of the did: 'all'(container, dataset or file)|'collection'(dataset or container)|'dataset'|'container'|'file'"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"long"),": Long format option to display more information for each DID."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"recursive"),": Recursively list DIDs content.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.list_dids_extended"',">","\\</a",">"),Object(i.b)("h4",{id:"list_dids_extended"},"list","_","dids","_","extended"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_dids_extended(scope, filters, type='collection', long=False, recursive=False)\n")),Object(i.b)("p",null,"List all data identifiers in a scope which match a given pattern. Extended version that goes through plugin mechanism."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"filters"),": A dictionary of key/value pairs like {'type': 'dataset', 'scope': 'test'}."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"type"),": The type of the did: 'all'(container, dataset or file)|'collection'(dataset or container)|'dataset'|'container'|'file'"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"long"),": Long format option to display more information for each DID."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"recursive"),": Recursively list DIDs content.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.add_did"',">","\\</a",">"),Object(i.b)("h4",{id:"add_did"},"add","_","did"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_did(scope, name, type, statuses=None, meta=None, rules=None, lifetime=None, dids=None, rse=None)\n")),Object(i.b)("p",null,"Add data identifier for a dataset or container."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The data identifier name.\n:paran type: The data identifier type (file|dataset|container)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"statuses"),": Dictionary with statuses, e.g.g {'monotonic':True}.\n:meta: Meta-data associated with the data identifier is represented using key/value pairs in a dictionary.\n:rules: Replication rules associated with the data identifier. A list of dictionaries, e.g., ","[{'copies': 2, 'rse_expression': 'TIERS1'}, ]","."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"lifetime"),": DID's lifetime (in seconds)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dids"),": The content."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name when registering replicas.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.add_dids"',">","\\</a",">"),Object(i.b)("h4",{id:"add_dids"},"add","_","dids"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_dids(dids)\n")),Object(i.b)("p",null,"Bulk add datasets/containers."),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.add_dataset"',">","\\</a",">"),Object(i.b)("h4",{id:"add_dataset"},"add","_","dataset"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_dataset(scope, name, statuses=None, meta=None, rules=None, lifetime=None, files=None, rse=None)\n")),Object(i.b)("p",null,"Add data identifier for a dataset."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The data identifier name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"statuses"),": Dictionary with statuses, e.g.g {'monotonic':True}.\n:meta: Meta-data associated with the data identifier is represented using key/value pairs in a dictionary.\n:rules: Replication rules associated with the data identifier. A list of dictionaries, e.g., ","[{'copies': 2, 'rse_expression': 'TIERS1'}, ]","."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"lifetime"),": DID's lifetime (in seconds)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"files"),": The content."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name when registering replicas.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.add_datasets"',">","\\</a",">"),Object(i.b)("h4",{id:"add_datasets"},"add","_","datasets"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_datasets(dsns)\n")),Object(i.b)("p",null,"Bulk add datasets."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dsns"),": A list of datasets.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.add_container"',">","\\</a",">"),Object(i.b)("h4",{id:"add_container"},"add","_","container"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_container(scope, name, statuses=None, meta=None, rules=None, lifetime=None)\n")),Object(i.b)("p",null,"Add data identifier for a container."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The data identifier name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"statuses"),": Dictionary with statuses, e.g.g {'monotonic':True}."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"meta"),": Meta-data associated with the data identifier is represented using key/value pairs in a dictionary."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rules"),": Replication rules associated with the data identifier. A list of dictionaries, e.g., ","[{'copies': 2, 'rse_expression': 'TIERS1'}, ]","."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"lifetime"),": DID's lifetime (in seconds).")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.add_containers"',">","\\</a",">"),Object(i.b)("h4",{id:"add_containers"},"add","_","containers"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_containers(cnts)\n")),Object(i.b)("p",null,"Bulk add containers."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"cnts"),": A list of containers.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.attach_dids"',">","\\</a",">"),Object(i.b)("h4",{id:"attach_dids"},"attach","_","dids"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | attach_dids(scope, name, dids, rse=None)\n")),Object(i.b)("p",null,"Attach data identifier."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The data identifier name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dids"),": The content."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name when registering replicas.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.detach_dids"',">","\\</a",">"),Object(i.b)("h4",{id:"detach_dids"},"detach","_","dids"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | detach_dids(scope, name, dids)\n")),Object(i.b)("p",null,"Detach data identifier"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The data identifier name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dids"),": The content.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.attach_dids_to_dids"',">","\\</a",">"),Object(i.b)("h4",{id:"attach_dids_to_dids"},"attach","_","dids","_","to","_","dids"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | attach_dids_to_dids(attachments, ignore_duplicate=False)\n")),Object(i.b)("p",null,"Add dids to dids."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"attachments"),": The attachments.\nattachments is: ","[attachment, attachment, ...]","\nattachment is: {'scope': scope, 'name': name, 'dids': dids}\ndids is: ","[{'scope': scope, 'name': name}, ...]","\n:param ignore_duplicate: If True, ignore duplicate entries.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.add_files_to_datasets"',">","\\</a",">"),Object(i.b)("h4",{id:"add_files_to_datasets"},"add","_","files","_","to","_","datasets"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_files_to_datasets(attachments, ignore_duplicate=False)\n")),Object(i.b)("p",null,"Add files to datasets."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"attachments"),": The attachments.\nattachments is: ","[attachment, attachment, ...]","\nattachment is: {'scope': scope, 'name': name, 'dids': dids}\ndids is: ","[{'scope': scope, 'name': name}, ...]"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ignore_duplicate"),": If True, ignore duplicate entries.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.add_datasets_to_containers"',">","\\</a",">"),Object(i.b)("h4",{id:"add_datasets_to_containers"},"add","_","datasets","_","to","_","containers"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_datasets_to_containers(attachments)\n")),Object(i.b)("p",null,"Add datasets_to_containers."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"attachments"),": The attachments.\nattachments is: ","[attachment, attachment, ...]","\nattachment is: {'scope': scope, 'name': name, 'dids': dids}\ndids is: ","[{'scope': scope, 'name': name}, ...]")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.add_containers_to_containers"',">","\\</a",">"),Object(i.b)("h4",{id:"add_containers_to_containers"},"add","_","containers","_","to","_","containers"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_containers_to_containers(attachments)\n")),Object(i.b)("p",null,"Add containers_to_containers."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"attachments"),": The attachments.\nattachments is: ","[attachment, attachment, ...]","\nattachment is: {'scope': scope, 'name': name, 'dids': dids}\ndids is: ","[{'scope': scope, 'name': name}, ...]")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.add_files_to_dataset"',">","\\</a",">"),Object(i.b)("h4",{id:"add_files_to_dataset"},"add","_","files","_","to","_","dataset"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_files_to_dataset(scope, name, files, rse=None)\n")),Object(i.b)("p",null,"Add files to datasets."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The dataset name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"files"),": The content."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The RSE name when registering replicas.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.add_files_to_archive"',">","\\</a",">"),Object(i.b)("h4",{id:"add_files_to_archive"},"add","_","files","_","to","_","archive"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_files_to_archive(scope, name, files)\n")),Object(i.b)("p",null,"Add files to archive."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The dataset name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"files"),": The content.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.add_datasets_to_container"',">","\\</a",">"),Object(i.b)("h4",{id:"add_datasets_to_container"},"add","_","datasets","_","to","_","container"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_datasets_to_container(scope, name, dsns)\n")),Object(i.b)("p",null,"Add datasets to container."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The dataset name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dsns"),": The content.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.add_containers_to_container"',">","\\</a",">"),Object(i.b)("h4",{id:"add_containers_to_container"},"add","_","containers","_","to","_","container"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_containers_to_container(scope, name, cnts)\n")),Object(i.b)("p",null,"Add containers to container."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The dataset name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dsns"),": The content.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.list_content"',">","\\</a",">"),Object(i.b)("h4",{id:"list_content"},"list","_","content"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_content(scope, name)\n")),Object(i.b)("p",null,"List data identifier contents."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The data identifier name.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.list_content_history"',">","\\</a",">"),Object(i.b)("h4",{id:"list_content_history"},"list","_","content","_","history"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_content_history(scope, name)\n")),Object(i.b)("p",null,"List data identifier contents history."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The data identifier name.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.list_files"',">","\\</a",">"),Object(i.b)("h4",{id:"list_files"},"list","_","files"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_files(scope, name, long=None)\n")),Object(i.b)("p",null,"List data identifier file contents."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The data identifier name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"long"),": A boolean to choose if GUID is returned or not.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.get_did"',">","\\</a",">"),Object(i.b)("h4",{id:"get_did"},"get","_","did"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_did(scope, name, dynamic=False)\n")),Object(i.b)("p",null,"Retrieve a single data identifier."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The data identifier name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dynamic"),": Calculate sizes dynamically when True")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.get_metadata"',">","\\</a",">"),Object(i.b)("h4",{id:"get_metadata"},"get","_","metadata"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_metadata(scope, name, plugin='DID_COLUMN')\n")),Object(i.b)("p",null,"Get data identifier metadata"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The data identifier name.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.get_metadata_bulk"',">","\\</a",">"),Object(i.b)("h4",{id:"get_metadata_bulk"},"get","_","metadata","_","bulk"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_metadata_bulk(dids)\n")),Object(i.b)("p",null,"Bulk get data identifier metadata"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dids"),": A list of dids.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.set_metadata"',">","\\</a",">"),Object(i.b)("h4",{id:"set_metadata"},"set","_","metadata"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | set_metadata(scope, name, key, value, recursive=False)\n")),Object(i.b)("p",null,"Set data identifier metadata"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The data identifier name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"key"),": the key."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"value"),": the value."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"recursive"),": Option to propagate the metadata change to content.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.set_metadata_bulk"',">","\\</a",">"),Object(i.b)("h4",{id:"set_metadata_bulk"},"set","_","metadata","_","bulk"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | set_metadata_bulk(scope, name, meta, recursive=False)\n")),Object(i.b)("p",null,"Set data identifier metadata in bulk."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The data identifier name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"meta"),": the metadata key-values.\n:type meta: dict"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"recursive"),": Option to propagate the metadata change to content.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.set_status"',">","\\</a",">"),Object(i.b)("h4",{id:"set_status"},"set","_","status"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | set_status(scope, name, **kwargs)\n")),Object(i.b)("p",null,"Set data identifier status"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The data identifier name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"kwargs"),": Keyword arguments of the form status_name=value.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.close"',">","\\</a",">"),Object(i.b)("h4",{id:"close"},"close"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | close(scope, name)\n")),Object(i.b)("p",null,"close dataset/container"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The dataset/container name.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.delete_metadata"',">","\\</a",">"),Object(i.b)("h4",{id:"delete_metadata"},"delete","_","metadata"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | delete_metadata(scope, name, key)\n")),Object(i.b)("p",null,"Delete data identifier metadata"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The data identifier."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"key"),": the key.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.list_did_rules"',">","\\</a",">"),Object(i.b)("h4",{id:"list_did_rules"},"list","_","did","_","rules"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_did_rules(scope, name)\n")),Object(i.b)("p",null,"List the associated rules of a data identifier."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The data identifier name.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.list_associated_rules_for_file"',">","\\</a",">"),Object(i.b)("h4",{id:"list_associated_rules_for_file"},"list","_","associated","_","rules","_","for","_","file"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_associated_rules_for_file(scope, name)\n")),Object(i.b)("p",null,"List the associated rules a file is affected from.."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The file name.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.get_dataset_by_guid"',">","\\</a",">"),Object(i.b)("h4",{id:"get_dataset_by_guid"},"get","_","dataset","_","by","_","guid"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_dataset_by_guid(guid)\n")),Object(i.b)("p",null,"Get the parent datasets for a given GUID."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"guid"),": The GUID.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"A did"),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.scope_list"',">","\\</a",">"),Object(i.b)("h4",{id:"scope_list"},"scope","_","list"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | scope_list(scope, name=None, recursive=False)\n")),Object(i.b)("p",null,"List data identifiers in a scope."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The data identifier name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"recursive"),": boolean, True or False.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.list_parent_dids"',">","\\</a",">"),Object(i.b)("h4",{id:"list_parent_dids"},"list","_","parent","_","dids"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_parent_dids(scope, name)\n")),Object(i.b)("p",null,"List parent dataset/containers of a did."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The name.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.create_did_sample"',">","\\</a",">"),Object(i.b)("h4",{id:"create_did_sample"},"create","_","did","_","sample"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | create_did_sample(input_scope, input_name, output_scope, output_name, nbfiles)\n")),Object(i.b)("p",null,"Create a sample from an input collection."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"input_scope"),": The scope of the input DID."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"input_name"),": The name of the input DID."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"output_scope"),": The scope of the output dataset."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"output_name"),": The name of the output dataset."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"nbfiles"),": The number of files to register in the output dataset.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.resurrect"',">","\\</a",">"),Object(i.b)("h4",{id:"resurrect"},"resurrect"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | resurrect(dids)\n")),Object(i.b)("p",null,"Resurrect a list of dids."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dids"),": A list of dids ","[{'scope': scope, 'name': name}, ...]")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.add_temporary_dids"',">","\\</a",">"),Object(i.b)("h4",{id:"add_temporary_dids"},"add","_","temporary","_","dids"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_temporary_dids(dids)\n")),Object(i.b)("p",null,"Bulk add temporary data identifiers."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dids"),": A list of dids.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.list_archive_content"',">","\\</a",">"),Object(i.b)("h4",{id:"list_archive_content"},"list","_","archive","_","content"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_archive_content(scope, name)\n")),Object(i.b)("p",null,"List archive contents."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The data identifier name.")),Object(i.b)("p",null,'\\<a name="didclient.DIDClient.list_dids_by_meta"',">","\\</a",">"),Object(i.b)("h4",{id:"list_dids_by_meta"},"list","_","dids","_","by","_","meta"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_dids_by_meta(scope=None, select={})\n")),Object(i.b)("p",null,"Gets all dids matching the values of the provided metadata keys"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": the scope of the search"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"select"),": the key value pairs to search with(query in json format)")),Object(i.b)("p",null,'\\<a name="diracclient"',">","\\</a",">"),Object(i.b)("h1",{id:"diracclient"},"diracclient"),Object(i.b)("p",null,'\\<a name="diracclient.DiracClient"',">","\\</a",">"),Object(i.b)("h2",{id:"diracclient-objects"},"DiracClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class DiracClient(BaseClient)\n")),Object(i.b)("p",null,"DataIdentifier client class for working with data identifiers"),Object(i.b)("p",null,'\\<a name="diracclient.DiracClient.add_files"',">","\\</a",">"),Object(i.b)("h4",{id:"add_files"},"add","_","files"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_files(lfns, ignore_availability=False)\n")),Object(i.b)("p",null,"Bulk add files :"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Create the file and replica."),Object(i.b)("li",{parentName:"ul"},"If doesn't exist create the dataset containing the file as well as a rule on the dataset on ANY sites."),Object(i.b)("li",{parentName:"ul"},"Create all the ascendants of the dataset if they do not exist")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"lfns"),": List of lfn (dictionary {'lfn': \\<lfn",">",", 'rse': \\<rse",">",", 'bytes': \\<bytes",">",", 'adler32': \\<adler32",">",", 'guid': \\<guid",">",", 'pfn': \\<pfn",">","}"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ignore_availability"),": A boolean to ignore blacklisted sites.")),Object(i.b)("p",null,'\\<a name="exportclient"',">","\\</a",">"),Object(i.b)("h1",{id:"exportclient"},"exportclient"),Object(i.b)("p",null,'\\<a name="exportclient.ExportClient"',">","\\</a",">"),Object(i.b)("h2",{id:"exportclient-objects"},"ExportClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class ExportClient(BaseClient)\n")),Object(i.b)("p",null,"RSE client class for exporting data from Rucio"),Object(i.b)("p",null,'\\<a name="exportclient.ExportClient.export_data"',">","\\</a",">"),Object(i.b)("h4",{id:"export_data"},"export","_","data"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | export_data(distance=True)\n")),Object(i.b)("p",null,"Export RSE data (RSE, settings, attributes and distance)."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"distance"),": To include the distance.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"A dict containing data"),Object(i.b)("p",null,'\\<a name="lifetimeclient"',">","\\</a",">"),Object(i.b)("h1",{id:"lifetimeclient"},"lifetimeclient"),Object(i.b)("p",null,'\\<a name="lifetimeclient.LifetimeClient"',">","\\</a",">"),Object(i.b)("h2",{id:"lifetimeclient-objects"},"LifetimeClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class LifetimeClient(BaseClient)\n")),Object(i.b)("p",null,"Lifetime client class for working with Lifetime Model exceptions"),Object(i.b)("p",null,'\\<a name="lifetimeclient.LifetimeClient.list_exceptions"',">","\\</a",">"),Object(i.b)("h4",{id:"list_exceptions"},"list","_","exceptions"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_exceptions(exception_id=None, states=None)\n")),Object(i.b)("p",null,"List exceptions to Lifetime Model."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"id"),": The id of the exception"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"states"),": The states to filter")),Object(i.b)("p",null,'\\<a name="lifetimeclient.LifetimeClient.add_exception"',">","\\</a",">"),Object(i.b)("h4",{id:"add_exception"},"add","_","exception"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_exception(dids, account, pattern, comments, expires_at)\n")),Object(i.b)("p",null,"Add exceptions to Lifetime Model."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dids"),": The list of dids"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account of the requester."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"pattern"),": The account."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"comments"),": The comments associated to the exception."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"expires_at"),": The expiration date of the exception.")),Object(i.b)("p",null,"returns:            The id of the exception."),Object(i.b)("p",null,'\\<a name="accountlimitclient"',">","\\</a",">"),Object(i.b)("h1",{id:"accountlimitclient"},"accountlimitclient"),Object(i.b)("p",null,'\\<a name="accountlimitclient.AccountLimitClient"',">","\\</a",">"),Object(i.b)("h2",{id:"accountlimitclient-objects"},"AccountLimitClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class AccountLimitClient(BaseClient)\n")),Object(i.b)("p",null,"Account limit client class for working with account limits"),Object(i.b)("p",null,'\\<a name="accountlimitclient.AccountLimitClient.set_account_limit"',">","\\</a",">"),Object(i.b)("h4",{id:"set_account_limit"},"set","_","account","_","limit"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | set_account_limit(account, rse, bytes, locality)\n")),Object(i.b)("p",null,"Sets an account limit for a given limit scope."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The name of the account."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The rse name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"bytes"),": An integer with the limit in bytes."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"locality"),": The scope of the account limit. 'local' or 'global'.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if quota was created successfully else False."),Object(i.b)("p",null,'\\<a name="accountlimitclient.AccountLimitClient.delete_account_limit"',">","\\</a",">"),Object(i.b)("h4",{id:"delete_account_limit"},"delete","_","account","_","limit"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | delete_account_limit(account, rse, locality)\n")),Object(i.b)("p",null,"Deletes an account limit for a given limit scope."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The name of the account."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The rse name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"locality"),": The scope of the account limit. 'local' or 'global'.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if quota was created successfully else False."),Object(i.b)("p",null,'\\<a name="accountlimitclient.AccountLimitClient.set_local_account_limit"',">","\\</a",">"),Object(i.b)("h4",{id:"set_local_account_limit"},"set","_","local","_","account","_","limit"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | set_local_account_limit(account, rse, bytes)\n")),Object(i.b)("p",null,"Sends the request to set an account limit for an account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The name of the account."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The rse name."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"bytes"),": An integer with the limit in bytes.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if quota was created successfully else False."),Object(i.b)("p",null,'\\<a name="accountlimitclient.AccountLimitClient.delete_local_account_limit"',">","\\</a",">"),Object(i.b)("h4",{id:"delete_local_account_limit"},"delete","_","local","_","account","_","limit"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | delete_local_account_limit(account, rse)\n")),Object(i.b)("p",null,"Sends the request to remove an account limit."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The name of the account."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": The rse name.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if quota was removed successfully. False otherwise."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccountNotFound"),": if account doesn't exist.")),Object(i.b)("p",null,'\\<a name="accountlimitclient.AccountLimitClient.set_global_account_limit"',">","\\</a",">"),Object(i.b)("h4",{id:"set_global_account_limit"},"set","_","global","_","account","_","limit"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | set_global_account_limit(account, rse_expression, bytes)\n")),Object(i.b)("p",null,"Sends the request to set a global account limit for an account."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The name of the account."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse_expression"),": The rse expression."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"bytes"),": An integer with the limit in bytes.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if quota was created successfully else False."),Object(i.b)("p",null,'\\<a name="accountlimitclient.AccountLimitClient.delete_global_account_limit"',">","\\</a",">"),Object(i.b)("h4",{id:"delete_global_account_limit"},"delete","_","global","_","account","_","limit"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | delete_global_account_limit(account, rse_expression)\n")),Object(i.b)("p",null,"Sends the request to remove a global account limit."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The name of the account."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse_expression"),": The rse expression.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if quota was removed successfully. False otherwise."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AccountNotFound"),": if account doesn't exist.")),Object(i.b)("p",null,'\\<a name="client"',">","\\</a",">"),Object(i.b)("h1",{id:"client"},"client"),Object(i.b)("p",null,"Client class for callers of the Rucio system"),Object(i.b)("p",null,'\\<a name="client.Client"',">","\\</a",">"),Object(i.b)("h2",{id:"client-objects"},"Client Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class Client(AccountClient, \n             AccountLimitClient, \n             MetaClient, \n             PingClient, \n             ReplicaClient, \n             RequestClient, \n             RSEClient, \n             ScopeClient, \n             DIDClient, \n             RuleClient, \n             SubscriptionClient, \n             LockClient, \n             ConfigClient, \n             TouchClient, \n             ImportClient, \n             ExportClient, \n             CredentialClient, \n             DiracClient)\n")),Object(i.b)("p",null,"Main client class for accessing Rucio resources. Handles the authentication."),Object(i.b)("p",null,'\\<a name="client.Client.',Object(i.b)("strong",{parentName:"p"},"init"),'"',">","\\</a",">"),Object(i.b)("h4",{id:"__init__-6"},"_","_","init","_","_"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | __init__(rucio_host=None, auth_host=None, account=None, ca_cert=None, auth_type=None, creds=None, timeout=600, user_agent='rucio-clients', vo=None)\n")),Object(i.b)("p",null,"Constructor for the Rucio main client class."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rucio_host"),": the host of the rucio system."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"auth_host"),": the host of the rucio authentication server."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": the rucio account that should be used to interact with the rucio system."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ca_cert"),": the certificate to verify the server."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"auth_type"),": the type of authentication to use (e.g. userpass, x509 ...)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"creds"),": credentials needed for authentication."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"timeout"),": Float describes the timeout of the request (in seconds)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"vo"),": The vo that the client will interact with.")),Object(i.b)("p",null,'\\<a name="pingclient"',">","\\</a",">"),Object(i.b)("h1",{id:"pingclient"},"pingclient"),Object(i.b)("p",null,'\\<a name="pingclient.PingClient"',">","\\</a",">"),Object(i.b)("h2",{id:"pingclient-objects"},"PingClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class PingClient(BaseClient)\n")),Object(i.b)("p",null,"Ping client class"),Object(i.b)("p",null,'\\<a name="pingclient.PingClient.ping"',">","\\</a",">"),Object(i.b)("h4",{id:"ping"},"ping"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | ping()\n")),Object(i.b)("p",null,"Sends a ping request to the rucio server."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"Dictonnary with server information"),Object(i.b)("p",null,'\\<a name="ruleclient"',">","\\</a",">"),Object(i.b)("h1",{id:"ruleclient"},"ruleclient"),Object(i.b)("p",null,'\\<a name="ruleclient.RuleClient"',">","\\</a",">"),Object(i.b)("h2",{id:"ruleclient-objects"},"RuleClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class RuleClient(BaseClient)\n")),Object(i.b)("p",null,"RuleClient class for working with replication rules"),Object(i.b)("p",null,'\\<a name="ruleclient.RuleClient.add_replication_rule"',">","\\</a",">"),Object(i.b)("h4",{id:"add_replication_rule"},"add","_","replication","_","rule"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | add_replication_rule(dids, copies, rse_expression, weight=None, lifetime=None, grouping='DATASET', account=None, locked=False, source_replica_expression=None, activity=None, notify='N', purge_replicas=False, ignore_availability=False, comment=None, ask_approval=False, asynchronous=False, delay_injection=None, priority=3, meta=None)\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"dids"),": The data identifier set."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"copies"),": The number of replicas."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse_expression"),": Boolean string expression to give the list of RSEs."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"weight"),": If the weighting option of the replication rule is used, the choice of RSEs takes their weight into account."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"lifetime"),": The lifetime of the replication rules (in seconds)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"grouping"),": ALL -  All files will be replicated to the same RSE.\nDATASET - All files in the same dataset will be replicated to the same RSE.\nNONE - Files will be completely spread over all allowed RSEs without any grouping considerations at all."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"account"),": The account owning the rule."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"locked"),": If the rule is locked, it cannot be deleted."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"source_replica_expression"),": RSE Expression for RSEs to be considered for source replicas."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"activity"),": Transfer Activity to be passed to FTS."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"notify"),": Notification setting for the rule (Y, N, C)."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"purge_replicas"),": When the rule gets deleted purge the associated replicas immediately."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ignore_availability"),": Option to ignore the availability of RSEs."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"ask_approval"),": Ask for approval of this replication rule."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"asynchronous"),": Create rule asynchronously by judge-injector."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"priority"),": Priority of the transfers."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"comment"),": Comment about the rule."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"meta"),": Metadata, as dictionary.")),Object(i.b)("p",null,'\\<a name="ruleclient.RuleClient.delete_replication_rule"',">","\\</a",">"),Object(i.b)("h4",{id:"delete_replication_rule"},"delete","_","replication","_","rule"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | delete_replication_rule(rule_id, purge_replicas=None)\n")),Object(i.b)("p",null,"Deletes a replication rule and all associated locks."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rule_id"),": The id of the rule to be deleted"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"purge_replicas"),": Immediately delete the replicas.\n:raises:                RuleNotFound, AccessDenied")),Object(i.b)("p",null,'\\<a name="ruleclient.RuleClient.get_replication_rule"',">","\\</a",">"),Object(i.b)("h4",{id:"get_replication_rule"},"get","_","replication","_","rule"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | get_replication_rule(rule_id, estimate_ttc=False)\n")),Object(i.b)("p",null,"Get a replication rule."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rule_id"),": The id of the rule to be retrieved."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"estimate_ttc"),": bool, if rule_info should return ttc information\n:raises:         RuleNotFound")),Object(i.b)("p",null,'\\<a name="ruleclient.RuleClient.update_replication_rule"',">","\\</a",">"),Object(i.b)("h4",{id:"update_replication_rule"},"update","_","replication","_","rule"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | update_replication_rule(rule_id, options)\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rule_id"),": The id of the rule to be retrieved."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"options"),": Options dictionary.\n:raises:          RuleNotFound")),Object(i.b)("p",null,'\\<a name="ruleclient.RuleClient.reduce_replication_rule"',">","\\</a",">"),Object(i.b)("h4",{id:"reduce_replication_rule"},"reduce","_","replication","_","rule"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | reduce_replication_rule(rule_id, copies, exclude_expression=None)\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rule_id"),": Rule to be reduced."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"copies"),": Number of copies of the new rule."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"exclude_expression"),": RSE Expression of RSEs to exclude.\n:raises:                    RuleReplaceFailed, RuleNotFound")),Object(i.b)("p",null,'\\<a name="ruleclient.RuleClient.move_replication_rule"',">","\\</a",">"),Object(i.b)("h4",{id:"move_replication_rule"},"move","_","replication","_","rule"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | move_replication_rule(rule_id, rse_expression)\n")),Object(i.b)("p",null,"Move a replication rule to another RSE and, once done, delete the original one."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rule_id"),": Rule to be moved."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse_expression"),": RSE expression of the new rule.\n:raises:                    RuleNotFound, RuleReplaceFailed")),Object(i.b)("p",null,'\\<a name="ruleclient.RuleClient.approve_replication_rule"',">","\\</a",">"),Object(i.b)("h4",{id:"approve_replication_rule"},"approve","_","replication","_","rule"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | approve_replication_rule(rule_id)\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rule_id"),": Rule to be approved.\n:raises:                    RuleNotFound")),Object(i.b)("p",null,'\\<a name="ruleclient.RuleClient.deny_replication_rule"',">","\\</a",">"),Object(i.b)("h4",{id:"deny_replication_rule"},"deny","_","replication","_","rule"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | deny_replication_rule(rule_id)\n")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rule_id"),": Rule to be denied.\n:raises:                    RuleNotFound")),Object(i.b)("p",null,'\\<a name="ruleclient.RuleClient.list_replication_rule_full_history"',">","\\</a",">"),Object(i.b)("h4",{id:"list_replication_rule_full_history"},"list","_","replication","_","rule","_","full","_","history"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_replication_rule_full_history(scope, name)\n")),Object(i.b)("p",null,"List the rule history of a DID."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": The scope of the DID."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": The name of the DID.")),Object(i.b)("p",null,'\\<a name="ruleclient.RuleClient.examine_replication_rule"',">","\\</a",">"),Object(i.b)("h4",{id:"examine_replication_rule"},"examine","_","replication","_","rule"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | examine_replication_rule(rule_id)\n")),Object(i.b)("p",null,"Examine a replication rule for errors during transfer."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rule_id"),": Rule to be denied.\n:raises:                    RuleNotFound")),Object(i.b)("p",null,'\\<a name="ruleclient.RuleClient.list_replica_locks"',">","\\</a",">"),Object(i.b)("h4",{id:"list_replica_locks"},"list","_","replica","_","locks"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_replica_locks(rule_id)\n")),Object(i.b)("p",null,"List details of all replica locks for a rule."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rule_id"),": Rule to be denied.\n:raises:                    RuleNotFound")),Object(i.b)("p",null,'\\<a name="ruleclient.RuleClient.list_replication_rules"',">","\\</a",">"),Object(i.b)("h4",{id:"list_replication_rules"},"list","_","replication","_","rules"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | list_replication_rules(filters=None)\n")),Object(i.b)("p",null,"List all replication rules which match a filter"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"filters"),": dictionary of attributes by which the rules should be filtered")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"True if successful, otherwise false."),Object(i.b)("p",null,'\\<a name="dq2client"',">","\\</a",">"),Object(i.b)("h1",{id:"dq2client"},"dq2client"),Object(i.b)("p",null,"Compatibility Wrapper for DQ2 and Rucio.\n",Object(i.b)("a",{parentName:"p",href:"http://svnweb.cern.ch/world/wsvn/dq2/trunk/dq2.clients/lib/dq2/clientapi/DQ2.py"},"http://svnweb.cern.ch/world/wsvn/dq2/trunk/dq2.clients/lib/dq2/clientapi/DQ2.py")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client"',">","\\</a",">"),Object(i.b)("h2",{id:"dq2client-objects"},"DQ2Client Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class DQ2Client()\n")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.finger"',">","\\</a",">"),Object(i.b)("h4",{id:"finger"},"finger"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | finger(userId=None)\n")),Object(i.b)("p",null,"User information lookup program."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"userId"),": The userId (Distinguished Name or account/nickname).")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Returns"),":"),Object(i.b)("p",null,"A dictionary with the name nickname, email, dn."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- AccountNotFound is raised in case the account doesn't exist.\n")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.bulkDeleteDatasetReplicas"',">","\\</a",">"),Object(i.b)("h4",{id:"bulkdeletedatasetreplicas"},"bulkDeleteDatasetReplicas"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | bulkDeleteDatasetReplicas()\n")),Object(i.b)("p",null,"ToDo MARTIN"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.cancelReplicaDeletions"',">","\\</a",">"),Object(i.b)("h4",{id:"cancelreplicadeletions"},"cancelReplicaDeletions"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | cancelReplicaDeletions(dsn, locations, scope=None)\n")),Object(i.b)("p",null,"Cancel deletion request for a replica. In Rucio does nothing."),Object(i.b)("p",null,"@param dsn: is the dataset.\n@param locations: is a list with the dataset replica locations.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.checkDatasetConsistency"',">","\\</a",">"),Object(i.b)("h4",{id:"checkdatasetconsistency"},"checkDatasetConsistency"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | checkDatasetConsistency(location, dsn, version=0, threshold=None, scope=None)\n")),Object(i.b)("p",null,"This method does nothing in Rucio since there is no tracker. We just check if the dataset exist (by running a get metadata)."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.closeDataset"',">","\\</a",">"),Object(i.b)("h4",{id:"closedataset"},"closeDataset"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | closeDataset(scope, dsn)\n")),Object(i.b)("p",null,"Closes the latest dataset version."),Object(i.b)("p",null,"@since: 0.2.0"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n- UnsupportedOperation is raised in case the dataset is already closed.\n")),Object(i.b)("p",null,"@return True"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.declareBadFiles"',">","\\</a",">"),Object(i.b)("h4",{id:"declarebadfiles"},"declareBadFiles"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | declareBadFiles()\n")),Object(i.b)("p",null,"ToDo Cedric"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.declareSuspiciousFiles"',">","\\</a",">"),Object(i.b)("h4",{id:"declaresuspiciousfiles"},"declareSuspiciousFiles"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | declareSuspiciousFiles()\n")),Object(i.b)("p",null,"ToDo Cedric"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.deleteDatasetReplicas"',">","\\</a",">"),Object(i.b)("h4",{id:"deletedatasetreplicas"},"deleteDatasetReplicas"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | deleteDatasetReplicas(dsn, locations, version=0, force=False, deep=False, logical=False, ignore_lifetime=False, all=False, grace_period=None, ignore_pin=False, scope=None)\n")),Object(i.b)("p",null,"Delete the dataset replica from the given site."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param locations: is a list with the dataset replica locations.\n@param version: is the dataset version number.\n@param ignore_pin: is an option to ignore the replica pin.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n- AccessDenied in case the account cannot delete the rule.\n")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.deleteDatasetSubscription"',">","\\</a",">"),Object(i.b)("h4",{id:"deletedatasetsubscription"},"deleteDatasetSubscription"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | deleteDatasetSubscription(dsn, site, version=None, scope=None)\n")),Object(i.b)("p",null,"Removes the dataset/dataset version subscription of the given dataset name from the given site. In Rucio does nothing."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param site: is the subscription dq2.location.\n@param version: is the dataset version number (None is passed the duid will be used).\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.deleteDatasetSubscriptions"',">","\\</a",">"),Object(i.b)("h4",{id:"deletedatasetsubscriptions"},"deleteDatasetSubscriptions"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | deleteDatasetSubscriptions(dsn, scope=None)\n")),Object(i.b)("p",null,"Marks all dataset/dataset version subscriptions of the given dataset. In Rucio does nothing."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.deleteDatasetVersionSubscriptions"',">","\\</a",">"),Object(i.b)("h4",{id:"deletedatasetversionsubscriptions"},"deleteDatasetVersionSubscriptions"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | deleteDatasetVersionSubscriptions(dsn, version, scope=None)\n")),Object(i.b)("p",null,"Removes all subscriptions of the given dataset version. In Rucio does nothing"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param version: is the dataset version number\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.deleteDatasetsFromContainer"',">","\\</a",">"),Object(i.b)("h4",{id:"deletedatasetsfromcontainer"},"deleteDatasetsFromContainer"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | deleteDatasetsFromContainer(name, datasets, scope)\n")),Object(i.b)("p",null,"Remove datasets from a container."),Object(i.b)("p",null,"@param name: name of the container.\n@type name: str\n@param datasets: list of datasets to be registered.\n","[dataset_name1, ..., dataset_nameN]","\n@type datasets: list"),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the container or dataset name doesn't exist.\n")),Object(i.b)("p",null,"@see: ",Object(i.b)("a",{parentName:"p",href:"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0004"},"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0004")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.deleteFilesFromDataset"',">","\\</a",">"),Object(i.b)("h4",{id:"deletefilesfromdataset"},"deleteFilesFromDataset"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | deleteFilesFromDataset(dsn, guids=[], scope=None)\n")),Object(i.b)("p",null,"Removes files from an existing dataset. Files are\nremoved from the latest open version only."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param guids: is a list of file unique identifiers (GUID).\nNote: the GUID is typically assigned by external tools\n(e.g. POOL) and must be passed along as is.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"DataIdentifierNotFound is raised in case the dataset name doesn't exist.")),Object(i.b)("p",null,"@return: List of lfns that failed to be added since they are duplicates?"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.eraseDataset"',">","\\</a",">"),Object(i.b)("h4",{id:"erasedataset"},"eraseDataset"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | eraseDataset(dsn, scope)\n")),Object(i.b)("p",null,"Deletes the subscriptions and the locations"),Object(i.b)("p",null,"@param dsn: is the dataset name\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,"@return: List of statuses for subscription and deletion deletions"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.freezeDataset"',">","\\</a",">"),Object(i.b)("h4",{id:"freezedataset"},"freezeDataset"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | freezeDataset(dsn, scope)\n")),Object(i.b)("p",null,"Freezes a dataset."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n- UnsupportedOperation is raised in case the dataset is already closed.\n")),Object(i.b)("p",null,"@return True"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.getDatasetSize"',">","\\</a",">"),Object(i.b)("h4",{id:"getdatasetsize"},"getDatasetSize"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | getDatasetSize(dsn, scope)\n")),Object(i.b)("p",null,"Used to get the dataset size"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,"@return: Size as integer"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.getMasterReplicaLocation"',">","\\</a",">"),Object(i.b)("h4",{id:"getmasterreplicalocation"},"getMasterReplicaLocation"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | getMasterReplicaLocation(dsn, version=0, scope=None)\n")),Object(i.b)("p",null,"Returns the master replicas location, in Rucio, this is the oldest rule."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param version: the version (not used in Rucio.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.getMetaDataAttribute"',">","\\</a",">"),Object(i.b)("h4",{id:"getmetadataattribute"},"getMetaDataAttribute"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | getMetaDataAttribute(dsn, attributes, version=0, scope=None)\n")),Object(i.b)("p",null,"Get the metadata information for the given dataset/dataset version. In Rucio the version is ignored."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param attributes: is a list of dataset metadata attributes.\n@param version: is the dataset version (0 is the latest).\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n- InvalidMetadata is raised in case the metadata doesn't exist.\n")),Object(i.b)("p",null,"@return Dictionary in the following format:\n{'attribute_1': value_1, ..., 'attribute_N': value_N}"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.getNumberOfFiles"',">","\\</a",">"),Object(i.b)("h4",{id:"getnumberoffiles"},"getNumberOfFiles"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | getNumberOfFiles(dsn, version, scope)\n")),Object(i.b)("p",null,"Returns the number of files in the given dataset (or dataversion). In Rucio the version is ignored."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param version: is the dataset version number. Ignored in Rucio.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,"@return: Number of files (integer)"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.getState"',">","\\</a",">"),Object(i.b)("h4",{id:"getstate"},"getState"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | getState(dsn, scope)\n")),Object(i.b)("p",null,"Returns the dataset state."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,"@return: The dataset state (check L{dq2.common.DQConstants.DatasetState\\<common.DQConstants.DatasetState",">","})."),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.getVersionMetadata"',">","\\</a",">"),Object(i.b)("h4",{id:"getversionmetadata"},"getVersionMetadata"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | getVersionMetadata(dsn, version=0, scope=None)\n")),Object(i.b)("p",null,"Retrieve data set version metadata."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param version: is the dataset version number. Ignored in Rucio.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,"@return: duid_10, vuid_10, version, versioncreationdate, tier0state, tier0type, numberfiles, size\n@rtype: tuple"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listDatasetReplicas"',">","\\</a",">"),Object(i.b)("h4",{id:"listdatasetreplicas"},"listDatasetReplicas"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listDatasetReplicas(dsn, version=0, complete=None, old=True, scope=None)\n")),Object(i.b)("p",null,"List the dataset replicas."),Object(i.b)("p",null,"@param dsn\n@param version: 0, no version in Rucio\n@param complete:\n@param old: if old=True, call list_data_locks(), otherwise call list_replicas()\n@param scope:"),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n- InvalidMetadata is raised in case the metadata doesn't exist.\n")),Object(i.b)("p",null,"@return Dictionary in the following format:\n{'rse_1':","[{'attribute_1': value_1, ..., 'attribute_N': value_N}]",",'rse_2':","[{...}]","}"),Object(i.b)("p",null,"@Rucio\n@pdn: always be ''\n@archived: should be 'primary' or 'custodial' for replicas without lifetime and 'secondary' for replicas with lifetime.\n@version: always be 0\n@transferState: If one the files is replicating, transferState=1, otherwise 0\n@chekState: always be 6\n@immutable: should be 0 for open datasets and 1 for closed datasets."),Object(i.b)("p",null,"@get_dataset_locks will help when option old=True is used"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listDatasetReplicasInContainer"',">","\\</a",">"),Object(i.b)("h4",{id:"listdatasetreplicasincontainer"},"listDatasetReplicasInContainer"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listDatasetReplicasInContainer(cn, scope=None)\n")),Object(i.b)("p",null,"ToDo -",">"," Jingya You"),Object(i.b)("p",null,"@return: a dictionary containing all dataset replicas for the container.\n{ \\<dataset_1",">",":\n{\\<vuid",">",": {0: ","[\\<site_1",">]",", 1: ","[\\<site_2",">",",\\<site_3",">]","}},\n\\<dataset_2",">",":\n{\\<vuid",">",": {0: ","[\\<site_1",">]",", 1: ","[\\<site_2",">",",\\<site_3",">]","}},\n...}\n@0:Incomplete, 1:Complete"),Object(i.b)("p",null,"({'rse_id': row.rse_id,\n'scope': row.scope,\n'name': row.name,\n'rule_id': row.rule_id,\n'account': row.account,\n'state': row.state})"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listDatasets"',">","\\</a",">"),Object(i.b)("h4",{id:"listdatasets"},"listDatasets"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listDatasets(dsn, version=0, onlyNames=False, p=None, rpp=None, scope=None)\n")),Object(i.b)("p",null,"ToDo -",">"," Jingya You"),Object(i.b)("p",null,"Used to return a list of datasets matching the given\npattern and version."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param version: is the dataset version number.\n@param onlyNames: Option to return only the dataset names.\n@param rpp: Print rrp first results.\n@param p: Specify page to print.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"@DQ2\nB{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DQDaoException is raised,\n    in case there is a python or database error in the central catalogs.\n")),Object(i.b)("p",null,"usage::\nlistDatasets('myname') - returns all versions of the given dataset\nlistDatasets('myname",Object(i.b)("em",{parentName:"p"},"') - returns all versions of the datasets that start by 'myname'.\nlistDatasets('"),"myname') - returns all versions of the datasets that end by 'myname'. -",">"," this should be avoid"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"listDatasets('myname', 2) - returns the version 2 of dataset 'myname'.\nlistDatasets('myname', 0) - returns the latest version of the dataset 'myname'.\nlistDatasets('myname', \\<0) - returns all the versions of the dataset 'myname'.\nlistDatasets('myname', ]-infinite, 0[) - returns all the versions of the dataset 'myname'.\n\nlistDatasets('myname*', 2) - returns the version 2 of the datasets that start by 'myname'.\nlistDatasets('*myname', None) - returns all the versions of the datasets that end with 'myname'.\n")),Object(i.b)("p",null,"@return: Dictionary containing the dataset versions information.\n{\n'dataset_nameA': {'duid': duid, 'vuids': ","['A_vuid_for_version1+X', ..., 'A_vuid_for_version1']","}\n'dataset_nameB': {'duid': duid, 'vuids': ","['B_vuid_for_version1']","}\n}, where X ",">"," 0"),Object(i.b)("p",null,"@Rucio\n@return: No version in Rucio\n{\n'dataset_nameA': {'duid': rucio_did, 'vuids': ","[rucio_did]","},\n'dataset_nameB': {'duid': rucio_did, 'vuids': ","[rucio_did]","}...\n}"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listDatasets2"',">","\\</a",">"),Object(i.b)("h4",{id:"listdatasets2"},"listDatasets2"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listDatasets2(metaDataAttributes, long=False, all=False, p=None, rpp=None, scope=None)\n")),Object(i.b)("p",null,"ToDo -",">"," Jingya You"),Object(i.b)("p",null,"Used to return a list of datasets matching the given\npattern and version.\nIn DQ2 the autorized metadata are :\nstate, type, name, duid, duid_10, vuid, version, creationdate, closeddate, deleteddate, frozendate,\nmodifieddate, tier0state, origin, tier0state, tier0type, physicsgroup\nIn Rucio the authorized metadata are :\nstate, type, name"),Object(i.b)("p",null,"@param metaDataAttributes: metadata attibutes for the sorting\n@param long: List dataset in long format (total sum for all the file sizes + total num of files).\n@param all: List all datasets, including the hidden ones.\n@param rpp: Print rrp first results.\n@param p: Specify page to print."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"InvalidMetadata is raised in case the metadata doesn't exist.")),Object(i.b)("p",null,"usage::\nlistDatasets(metaDataAttributes={name:'myname'}) - returns all datasets matching the pattern"),Object(i.b)("p",null,"@return: Dictionary containing the dataset information.\n{\n'dataset_nameA': {}\n'dataset_nameB': {}\n}"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listDatasetsByCreationDate"',">","\\</a",">"),Object(i.b)("h4",{id:"listdatasetsbycreationdate"},"listDatasetsByCreationDate"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listDatasetsByCreationDate()\n")),Object(i.b)("p",null,"ToDo"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listDatasetsByGUIDs"',">","\\</a",">"),Object(i.b)("h4",{id:"listdatasetsbyguids"},"listDatasetsByGUIDs"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listDatasetsByGUIDs(guids)\n")),Object(i.b)("p",null,"Returns a dictionary mapping guid to dataset names.\n@since: 0.3.1"),Object(i.b)("p",null,"@param guids: a list of guids"),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- RucioException is raised in case of exception.\n")),Object(i.b)("p",null,"@return: Returns the guid-",">","dataset names mapping.::\n{'guid': ","[dsnX, dsnY]","}\nor\n{}"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listDatasetsByMetaData"',">","\\</a",">"),Object(i.b)("h4",{id:"listdatasetsbymetadata"},"listDatasetsByMetaData"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listDatasetsByMetaData(filter)\n")),Object(i.b)("p",null,"List the dataset versions that match the given criteria.\nIn DQ2 the autorized metadata are :\nstate, type, name, duid, duid_10, vuid, version, creationdate, closeddate, deleteddate, frozendate,\nmodifieddate, tier0state, origin, tier0state, tier0type, physicsgroup\nIn Rucio the authorized metadata are :\nstate, type, name"),Object(i.b)("p",null,"@param filter: list containing dictionaries of metadata attributes and values\n({'attrname_0': attrvalue_0, ..., 'attrname_N': attrvalue_N})."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- InvalidMetadata is raised in case the metadata doesn't exist.\n")),Object(i.b)("p",null,"@return: List of tuples with (dataset name, version).\n","[\n('dataset_name_1', 'vuid_1'),\n(...),\n('dataset_name_N', 'vuid_N')\n]"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listDatasetsByNameInSite"',">","\\</a",">"),Object(i.b)("h4",{id:"listdatasetsbynameinsite"},"listDatasetsByNameInSite"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listDatasetsByNameInSite(site, complete=None, name=None, p=None, rpp=None, group=None)\n")),Object(i.b)("p",null,"List datasets at site"),Object(i.b)("p",null,"@param site: is the location to be searched for.\n@param complete: is the location state of the dataset at a site and may have\nthe following values: None: in which case the\nlocation state is ignore; LocationState.COMPLETE: lists only datasets\nfully present at the site (no files missing);\nLocationState.INCOMPLETE: lists only datasets partially present at the\nsite (some files missing).\n@param page: is the page to be displayed.\n@param rpp: are the results per page.\n@param group: Not used"),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- RSENotFound is raised in case the site doesn't exist.\n")),Object(i.b)("p",null,"@return: Tuple of dataset.\n('dsn1', 'dsn2'... )"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listDatasetsInContainer"',">","\\</a",">"),Object(i.b)("h4",{id:"listdatasetsincontainer"},"listDatasetsInContainer"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listDatasetsInContainer(cn, scope)\n")),Object(i.b)("p",null,"ToDo -",">"," Jingya You\n@param cn: container name\n@return: Not found in DQ2\n@Rucio's return\n","[{u'adler32': None, u'name': u'2013-12-30_11', u'bytes': None, u'scope': u'ams-2014-ISS.B700-pass5', u'type': u'DATASET', u'md5': None}, \\\n{u'adler32': None, u'name': u'2013-12-30_12', u'bytes': None, u'scope': u'ams-2014-ISS.B700-pass5', u'type': u'DATASET', u'md5': None}, ....]"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listDatasetsInSite"',">","\\</a",">"),Object(i.b)("h4",{id:"listdatasetsinsite"},"listDatasetsInSite"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listDatasetsInSite(site, complete=None, page=1, rpp=100)\n")),Object(i.b)("p",null,"List all the datasets and their versions available on\nthe given site."),Object(i.b)("p",null,"@param site: is the location to be searched for.\n@param complete: is the location state of the dataset at a site and may have\nthe following values: None: in which case the\nlocation state is ignore; LocationState.COMPLETE: lists only datasets\nfully present at the site (no files missing);\nLocationState.INCOMPLETE: lists only datasets partially present at the\nsite (some files missing).\n@param page: is the page to be displayed.\n@param rpp: are the results per page."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- RSENotFound is raised in case the site doesn't exist.\n")),Object(i.b)("p",null,"@return: List of dataset versions.\n{'dsn': ","[version_numberX,... version_numberY]","}"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listFileReplicas"',">","\\</a",">"),Object(i.b)("h4",{id:"listfilereplicas"},"listFileReplicas"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listFileReplicas(location, dsn, version=0, scope=None)\n")),Object(i.b)("p",null,"@param dsn is the dataset name.\n@param version is the dataset version number.\n@param scope: is the dataset scope.\n@param location is the location place of the dataset\nB{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,"@ return dictionnary e.g.:\n{'content': ","[guid1,...]",", 'transferState': 1, 'length': 46018142, 'checkstate': 6, 'found': 200, 'total': 200, 'immutable': 1}]"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listFileReplicasBySites"',">","\\</a",">"),Object(i.b)("h4",{id:"listfilereplicasbysites"},"listFileReplicasBySites"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listFileReplicasBySites(dsn, version=0, locations=[], threshold=None, timeout=None, scope=None)\n")),Object(i.b)("p",null,"Iterator to list file replica with info refresh if needed."),Object(i.b)("p",null,"@param dsn: String - Dataset name to check.\n@param version: Number - Dataset version to check, don't need to be implanted in Rucio.\n@param locations: List of locations. Restrict result to a subset of locations.\n@param threshold:  in seconds. Refresh info if checkdate \\< sysdate - threshold. ",Object(i.b)("inlineCode",{parentName:"p"},"not")," implanted\n@param timeout:  in seconds. ",Object(i.b)("inlineCode",{parentName:"p"},"neccessary"),"? There's no timeout exception in rucio.common.exception\n@param scope: is the dataset scope."),Object(i.b)("p",null,"@raise No replicas found, timeout"),Object(i.b)("p",null,"@Rucio\n@version: always be 0\n@transferState: If the files are replicating, transferState=1, otherwise 0\n@checkState: always be 6\n@immutable: should be 0 for open datasets and 1 for closed datasets.\n@get_dataset_locks will help when option old=True is used"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listFilesInDataset"',">","\\</a",">"),Object(i.b)("h4",{id:"listfilesindataset"},"listFilesInDataset"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listFilesInDataset(dsn, version=None, scope=None, long=False)\n")),Object(i.b)("p",null,"Given a dataset name, and optional version, the guids\nand lfns of the files in the dataset are returned."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param version: is the dataset version number (0 =",">"," the latest version). not in Rucio\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions}:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DQDaoException is raised,\n    in case there is a python or database error in the central catalogs.\n- DQUnknownDatasetException is raised,\n    in case there is no dataset with the given name.\n")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listMetaDataAttributes"',">","\\</a",">"),Object(i.b)("h4",{id:"listmetadataattributes"},"listMetaDataAttributes"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listMetaDataAttributes()\n")),Object(i.b)("p",null,"ToDo"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listMetaDataReplica"',">","\\</a",">"),Object(i.b)("h4",{id:"listmetadatareplica"},"listMetaDataReplica"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listMetaDataReplica(location, dsn, version=0, scope=None)\n")),Object(i.b)("p",null,"Returns a list containing all metadata attributes for dataset replicas."),Object(i.b)("p",null,"@param scope: is the dataset scope."),Object(i.b)("p",null,"@since: 0.4.0"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listSubscriptionInfo"',">","\\</a",">"),Object(i.b)("h4",{id:"listsubscriptioninfo"},"listSubscriptionInfo"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listSubscriptionInfo(dsn, location, version, scope=None)\n")),Object(i.b)("p",null,"@param dsn: the dataset name.\n@version: the dataset version. Ignored in Rucio.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,"@return: tuple containing the dataset subscription information is returned.::\n(uid, owner, location, destination, creationdate, modifieddate, callbacks, archived, sources_policy, wait_for_sources, sources, query_more_sources, share)"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listSubscriptions"',">","\\</a",">"),Object(i.b)("h4",{id:"listsubscriptions"},"listSubscriptions"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listSubscriptions(dsn, version=None, archived=None, scope=None)\n")),Object(i.b)("p",null,"Return a list of sites that have subscribed the given dataset."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param version: is the dataset version number (0 is the latest).\n@param archived: is the dataset subscription state.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n")),Object(i.b)("p",null,"@return: List containing the sites that subscribed, at least, a version of the dataset."),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listSubscriptionsInSite"',">","\\</a",">"),Object(i.b)("h4",{id:"listsubscriptionsinsite"},"listSubscriptionsInSite"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listSubscriptionsInSite(site, long=False)\n")),Object(i.b)("p",null,"Returns a dict of all subscribed uids in a site containing all attributes."),Object(i.b)("p",null,"@param site: is the dataset subscription dq2.location.\n@param long: List dataset in long format (total sum for all the file sizes + total num of files)."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- RSENotFound is raised in case the site doesn't exist.\n")),Object(i.b)("p",null,"@return: Returns a list of all subscribed uids in a site containing all attributes.\n{'dsn': ","[versionX, versionY]","}"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.listSuspiciousFiles"',">","\\</a",">"),Object(i.b)("h4",{id:"listsuspiciousfiles"},"listSuspiciousFiles"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | listSuspiciousFiles()\n")),Object(i.b)("p",null,"ToDo"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.ping"',">","\\</a",">"),Object(i.b)("h4",{id:"ping-1"},"ping"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | ping()\n")),Object(i.b)("p",null,"Checks if the Rucio clients are well configured."),Object(i.b)("p",null,"@return: dictionary containing the client's configuration settings.::\n{\n'rucio'      : (url_insecure, url_secure, alive),\n}"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.queryReplicaHistory"',">","\\</a",">"),Object(i.b)("h4",{id:"queryreplicahistory"},"queryReplicaHistory"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | queryReplicaHistory()\n")),Object(i.b)("p",null,"ToDo"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.queryStorageUsage"',">","\\</a",">"),Object(i.b)("h4",{id:"querystorageusage"},"queryStorageUsage"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | queryStorageUsage(key=None, value=None, site=None, metaDataAttributes={}, locations=[])\n")),Object(i.b)("p",null,"Returns a tuple containing storage usage infos ."),Object(i.b)("p",null,"@since: 0.4.6"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.queryStorageUsageHistory"',">","\\</a",">"),Object(i.b)("h4",{id:"querystorageusagehistory"},"queryStorageUsageHistory"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | queryStorageUsageHistory(site, key='GRID', value='total')\n")),Object(i.b)("p",null,"Returns a tuple containing storage usage evolution.\n@since: 0.4.*"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.registerContainer"',">","\\</a",">"),Object(i.b)("h4",{id:"registercontainer"},"registerContainer"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | registerContainer(name, datasets=[], scope=None)\n")),Object(i.b)("p",null,"Creates a container."),Object(i.b)("p",null,"@since: 1.0"),Object(i.b)("p",null,"@param name: name of the container.\n@type name: str\n@param datasets: list of datasets to be registered.\n","[dataset_name1, ..., dataset_nameN]","\n@type datasets: list"),Object(i.b)("p",null,"@see: ",Object(i.b)("a",{parentName:"p",href:"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0001"},"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0001")),Object(i.b)("p",null,"@raise DQContainerExistsException:\nin case a container with the same name already exists."),Object(i.b)("p",null,"@return: None\n@rtype: NoneType"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.registerDatasetLocation"',">","\\</a",">"),Object(i.b)("h4",{id:"registerdatasetlocation"},"registerDatasetLocation"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | registerDatasetLocation(dsn, location, version=0, complete=0, group=None, archived=None, acl_alias=None, lifetime=None, pin_lifetime=None, activity=None, scope=None)\n")),Object(i.b)("p",null,"Register new replica of a dataset(which must already defined in the repository)"),Object(i.b)("p",null,'@param dsn: is the dataset name.\n@param location: is the dataset dq2.location.(map to rucio RSE?)\n@param version: is the dataset version number.\n@param complete: is the location state of the dataset at a site and may have the following values:\nNone: in which case the location state is ignore;\nLocationState.COMPLETE: lists only datasets fully present at the site (no files missing);\nLocationState.INCOMPLETE: lists only datasets partially present at the site (some files missing).\n@param acl_alias: is the  acl_alias, e.g. custodial which will be assocaited with the replica.\n@param archived: Obsolete argument (still here to maintain backward compatibility).\n@param lifetime: Dataset replica lifetime. Acceptable formats are: "X days" or "X days, HH:MM:SS" or "HH:MM:SS".\n@param pin_lifetime: Pin replica lifetime. Acceptable formats are: "X days" or "X days, HH:MM:SS" or "HH:MM:SS".\n@param activity: is the activity.\n@param scope: is the dataset scope.'),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n- UnsupportedOperation is raised in case the location does not exist.\n")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.registerDatasetSubscription"',">","\\</a",">"),Object(i.b)("h4",{id:"registerdatasetsubscription"},"registerDatasetSubscription"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | registerDatasetSubscription(dsn, location, version=0, archived=None, callbacks={}, sources={}, sources_policy=None, wait_for_sources=0, destination=None, query_more_sources=0, sshare=None, group=None, owner=None, activity=None, acl_alias=None, replica_lifetime=None, check_destination=False, parentId=None, pin_lifetime=None, scope=None)\n")),Object(i.b)("p",null,"Register a new subscription in the location catalog. If the\nversion is not specified a duid is used."),Object(i.b)("p",null,"@since: 0.2.0"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param location: is the location where the dataset should be subscribed.\n@param version: not used.\n@param archived: to define rule type.\n@param callbacks: is a dictionary which specifies, per subscription callback.\n@sources: not used.\n@destination: not used.\n@query_more_sources: not used.\n@sshare: not used yet.\n@group: not used.\n@owner: not used yet.\n@activity: is the activity.\n@acl_alias: not used.\n@replica_lifetime: is the replica lifetime.\n@check_destination: not used.\n@parentId: not used.\n@pin_lifetime: not used.\n@param scope: is the dataset scope."),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.registerDatasetsInContainer"',">","\\</a",">"),Object(i.b)("h4",{id:"registerdatasetsincontainer"},"registerDatasetsInContainer"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | registerDatasetsInContainer(name, datasets, scope=None)\n")),Object(i.b)("p",null,"ToDo Ookey\nRegister datasets into a container."),Object(i.b)("p",null,"@param name: name of the container.\n@type name: str\n@param datasets: list of datasets to be registered.\n","[dataset_name1, ..., dataset_nameN]","\n@type datasets: list\n@param scope: is the dataset scope."),Object(i.b)("p",null,"@since: 1.0"),Object(i.b)("p",null,"@raise DQContainerIsInStateException:\nin case the container is closed or archived.\n@raise DQContainerNotOwner:\nin case the user is not the owner of the container.\n@raise DQContainerUnknownException:\nin case the container does not exist."),Object(i.b)("p",null,"@see: ",Object(i.b)("a",{parentName:"p",href:"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0003"},"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0003"),"\n@see: ",Object(i.b)("a",{parentName:"p",href:"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0010"},"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0010"),"\n@see: ",Object(i.b)("a",{parentName:"p",href:"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0011"},"https://twiki.cern.ch/twiki/bin/view/Atlas/DonQuijote2ContainerCatalogUC0011")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.registerFilesInDataset"',">","\\</a",">"),Object(i.b)("h4",{id:"registerfilesindataset"},"registerFilesInDataset"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | registerFilesInDataset(dsn, lfns=[], guids=[], sizes=[], checksums=[], ignore=False, scope=None, rse=None, pfns=[], events=[], lumiblocknrs=[])\n")),Object(i.b)("p",null,"Add existing files to an existing dataset.(attach file to dataset)"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param lfns: is a list of logical filenames (LFN).\n@param guids: is a list of file unique identifiers (GUID).\n@param sizes: is a list of the file sizes.\n@param checksums: is a list of the file checksums.\n","[md5:\\<md5_32_character_string",">",", ...]","\n@param ignore: is a boolean to ignore errors.\n@param scope: is the dataset scope.\n@param rse: is the rse.\n@param pfns: is a list of PFN.\n@param events: is a list of number of events.\n@param lumiblocknrs: is a list of lumiblocks."),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.registerFilesInDatasets"',">","\\</a",">"),Object(i.b)("h4",{id:"registerfilesindatasets"},"registerFilesInDatasets"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | registerFilesInDatasets(datasets, rse=None)\n")),Object(i.b)("p",null,"Add existing files to an existing dataset.(attach file to dataset)"),Object(i.b)("p",null,"@param dataset: is a dictionary containing the dataset name and a list of its files.\n{'dsn': ","[{'guid', 'vuid', 'lfn', 'size', 'checksum', 'scope'}]","}\nwhere checksum is 'md5:\\<md5_32_character_string",">","'"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.registerNewDataset"',">","\\</a",">"),Object(i.b)("h4",{id:"registernewdataset"},"registerNewDataset"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | registerNewDataset(dsn, lfns=[], guids=[], sizes=[], checksums=[], cooldown=None, provenance=None, group=None, hidden=False, scope=None, rse=None, pfns=[], events=[], lumiblocknrs=[], activity=None)\n")),Object(i.b)("p",null,"Register a brand new dataset and associated files (lists of lfns and guids).\n@since: 0.2.0"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param lfns: is a list of logical filenames (LFN).\n@param guids: is a list of file unique identifiers (GUID).\nNote: the GUID is typically assigned by external tools\n(e.g. POOL) and must be passed along as is.\n@param sizes: is a list of the file sizes.\n@param checksums: is a list of the file checksums.\n","[md5:\\<md5_32_character_string",">",", ...]",'\n@param cooldown: is a time delta after which the dataset will be automaticaly frozen.\nAcceptable formats are: "X days" or "X days, HH:MM:SS" or "HH:MM:SS".\n@param provenance: is the dataset provenance, e.g. TO.\n@param group: is the delegated owning group.\n@param hidden: hidden dataset.\n@param scope: is the dataset scope.\n@param rse: is the location of the files if lfns is not empty.\n@param pfns: is a list of PFN.\n@param events: is a list of number of events.\n@param lumiblocknrs: is a list of lumiblocks.\n@param activity: is the activity'),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"DQDaoException is raised,\nin case there is a python or database error in the central catalogs."),Object(i.b)("li",{parentName:"ul"},"DQDatasetExistsException is raised,\nin case there is a dataset with the given name.")),Object(i.b)("p",null,"@return: Dictionary containing the dataset duid, vuid and version information.::\n{'duid': '...', 'vuid': '...', 'version': ...}"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.registerNewDataset2"',">","\\</a",">"),Object(i.b)("h4",{id:"registernewdataset2"},"registerNewDataset2"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | registerNewDataset2(dsn, lfns=[], guids=[], sizes=[], checksums=[], cooldown=None, provenance=None, group=None, hidden=False, ignore=False, scope=None, rse=None)\n")),Object(i.b)("p",null,"Register a brand new dataset and associated files (lists of lfns and guids)."),Object(i.b)("p",null,"@since: 0.2.0"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param lfns: is a list of logical filenames (LFN).\n@param guids: is a list of file unique identifiers (GUID).\nNote: the GUID is typically assigned by external tools\n(e.g. POOL) and must be passed along as is.\n@param sizes: is a list of the file sizes.\n@param checksums: is a list of the file checksums.\n","[md5:\\<md5_32_character_string",">",", ...]",'\n@param cooldown: is a time delta after which the dataset will be automaticaly frozen.\nAcceptable formats are: "X days" or "X days, HH:MM:SS" or "HH:MM:SS".\n@param provenance: is the dataset provenance, e.g. TO.\n@param group: is the delegated owning group.\n@param hidden: hidden dataset.\n@param scope: is the dataset scope.\n@param rse: is the location of the files if lfns is not empty.'),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"DQDaoException is raised,\nin case there is a python or database error in the central catalogs."),Object(i.b)("li",{parentName:"ul"},"DQDatasetExistsException is raised,\nin case there is a dataset with the given name.")),Object(i.b)("p",null,"@return: Dictionary containing the dataset duid, vuid and version information.::\n{'duid': '...', 'vuid': '...', 'version': ...}"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.registerNewVersion"',">","\\</a",">"),Object(i.b)("h4",{id:"registernewversion"},"registerNewVersion"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | registerNewVersion(dsn, lfns=[], guids=[], sizes=[], checksums=[], ignore=False, scope=None)\n")),Object(i.b)("p",null,"Register a new version of the dataset with the\ngiven additional files (lists of lfns and guids).\nPlus, it notifies the subscription catalog for changes\non the dataset and on dataset previous version."),Object(i.b)("p",null,"@since: 0.2.0"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param lfns: is a list of logical filenames (LFN).\n@param guids: is a list of file unique identifiers (GUID).\nNote: the GUID is typically assigned by external tools\n(e.g. POOL) and must be passed along as is.\n@param sizes: is a list of the file sizes.\n@param checksums: is a list of the file checksums.\n","[md5:\\<md5_32_character_string",">",", ...]","\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"DataIdentifierNotFound is raised in case the dataset name doesn't exist."),Object(i.b)("li",{parentName:"ul"},"UnsupportedOperation otherwise.")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.registerNewVersion2"',">","\\</a",">"),Object(i.b)("h4",{id:"registernewversion2"},"registerNewVersion2"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | registerNewVersion2(dsn, lfns=[], guids=[], sizes=[], checksums=[], ignore=False, scope=None)\n")),Object(i.b)("p",null,"Register a new version of the dataset with the\ngiven additional files (lists of lfns and guids).\nPlus, it notifies the subscription catalog for changes\non the dataset and on dataset previous version."),Object(i.b)("p",null,"@since: 0.2.0"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param lfns: is a list of logical filenames (LFN).\n@param guids: is a list of file unique identifiers (GUID).\nNote: the GUID is typically assigned by external tools\n(e.g. POOL) and must be passed along as is.\n@param sizes: is a list of the file sizes.\n@param checksums: is a list of the file checksums.\n","[md5:\\<md5_32_character_string",">",", ...]","\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"DataIdentifierNotFound is raised in case the dataset name doesn't exist."),Object(i.b)("li",{parentName:"ul"},"UnsupportedOperation otherwise.")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.resetSubscription"',">","\\</a",">"),Object(i.b)("h4",{id:"resetsubscription"},"resetSubscription"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | resetSubscription(dsn, location, version=0, scope=None)\n")),Object(i.b)("p",null,"Reset the dataset subscription registered at the given dq2.location. In Rucio does nothing."),Object(i.b)("p",null,"@since: 0.3.0"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param location: is the location where the dataset is subscribed.\n@param version: is the dataset version number.\n@param scope: is the dataset scope."),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.resetSubscriptionsInSite"',">","\\</a",">"),Object(i.b)("h4",{id:"resetsubscriptionsinsite"},"resetSubscriptionsInSite"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | resetSubscriptionsInSite(site)\n")),Object(i.b)("p",null,"Resets the subscriptions registered in the given site. In Rucio does nothing."),Object(i.b)("p",null,"@since: 0.3.0"),Object(i.b)("p",null,"@param site: is the dataset subscription dq2.location."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DQDaoException is raised,\n    in case there is a python or database error in the central catalogs.\n- DQUnknownSubscriptionException is raised,\n    in case there are no subscriptions at the given site.\n")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.searchDatasets"',">","\\</a",">"),Object(i.b)("h4",{id:"searchdatasets"},"searchDatasets"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | searchDatasets()\n")),Object(i.b)("p",null,"ToDo"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.setDatasetReplicaToDeleted"',">","\\</a",">"),Object(i.b)("h4",{id:"setdatasetreplicatodeleted"},"setDatasetReplicaToDeleted"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | setDatasetReplicaToDeleted()\n")),Object(i.b)("p",null,"ToDo"),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.setMetaDataAttribute"',">","\\</a",">"),Object(i.b)("h4",{id:"setmetadataattribute"},"setMetaDataAttribute"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | setMetaDataAttribute(dsn, attrname, attrvalue, scope=None)\n")),Object(i.b)("p",null,"ToDo Ookey"),Object(i.b)("p",null,"Set the value of the given attribute to the given\nvalue for the given dataset. Operates on the current version."),Object(i.b)("p",null,"@since: 0.2.0"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param attrname: is the metadata dataset attribute name.\n@param attrvalue: is the metadata dataset attribute value.\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DQDaoException is raised,\n    in case there is a python or database error in the central catalogs.\n- DQInvalidRequest is raised,\n    in case the given parameters aren't valid.\n- DQSecurityException is raised,\n    in case the user has no permissions to set metadata attributes on the dataset.\n- DQInvalidRequestException is raised,\n    in case of an invalid attribute name.\n- DQUnknownDatasetException is raised,\n    in case there is no dataset with the given name.\n")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.setReplicaMetaDataAttribute"',">","\\</a",">"),Object(i.b)("h4",{id:"setreplicametadataattribute"},"setReplicaMetaDataAttribute"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | setReplicaMetaDataAttribute(dsn, location, attrname, attrvalue, scope=None)\n")),Object(i.b)("p",null,"Set the value of the given attribute to the given\nvalue for the given dataset replica. Operates on the current version."),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param location: is the location name.\n@param attrname: is the metadata dataset attribute name.\n@param attrvalue: is the metadata dataset attribute value.\n@param scope: is dataset scope."),Object(i.b)("p",null,"B{Exceptions:}"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},"- DataIdentifierNotFound is raised in case the dataset name doesn't exist.\n- InvalidMetadata is is raised in case of non valid attrname\n- InputValidationError is case of non valid attrvalue\n- UnsupportedOperation if the replica doesn't exist.\n")),Object(i.b)("p",null,'\\<a name="dq2client.DQ2Client.verifyFilesInDataset"',">","\\</a",">"),Object(i.b)("h4",{id:"verifyfilesindataset"},"verifyFilesInDataset"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | verifyFilesInDataset(dsn, guids, version=None, scope=None)\n")),Object(i.b)("p",null,"Verifies if the given files' global unique identifiers (GUIDS) are registered on the dataset."),Object(i.b)("p",null,"(since 0.4.0)"),Object(i.b)("p",null,"@param dsn: is the dataset name.\n@param guids: is a list of file unique identifiers (GUID).\nNote: the GUID is typically assigned by external tools\n(e.g. POOL) and must be passed along as is.\n@param version: is the dataset version number (0 =",">"," the latest version).\n@param scope: is the dataset scope."),Object(i.b)("p",null,"B{Exceptions}:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"DQDaoException is raised,\nin case there is a python or database error in the central catalogs."),Object(i.b)("li",{parentName:"ul"},"DQUnknownDatasetException is raised,\nin case there is no dataset with the given name.")),Object(i.b)("p",null,"@return: Dictionary with the following format:\n{\nGUIDX: True, # exist\n(...)\nGUIDY: False # don't exist\n}"),Object(i.b)("p",null,'\\<a name="touchclient"',">","\\</a",">"),Object(i.b)("h1",{id:"touchclient"},"touchclient"),Object(i.b)("p",null,'\\<a name="touchclient.TouchClient"',">","\\</a",">"),Object(i.b)("h2",{id:"touchclient-objects"},"TouchClient Objects"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"},"class TouchClient(BaseClient)\n")),Object(i.b)("p",null,"Touch client class to send a trace that can be used to\nupdate accessed_at for file or dataset DIDs"),Object(i.b)("p",null,'\\<a name="touchclient.TouchClient.touch"',">","\\</a",">"),Object(i.b)("h4",{id:"touch"},"touch"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-python"}," | touch(scope, name, rse=None)\n")),Object(i.b)("p",null,"Sends a touch trace for a given file or dataset."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Arguments"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"scope"),": the scope of the file/dataset to update."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"name"),": the name of file/dataset to update."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"rse"),": optional parameter if a specific replica should be touched.")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Raises"),":"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"DataIdentifierNotFound"),": if given dids does not exist."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RSENotFound"),": if rse is not None and given rse does not exist."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"UnsupportedDIDType"),": if type of the given DID is not FILE or DATASET."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"RucioException"),": if trace could not be sent successfully.")))}p.isMDXComponent=!0},347:function(e,t,a){"use strict";a.d(t,"a",(function(){return p})),a.d(t,"b",(function(){return m}));var n=a(0),l=a.n(n);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function c(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function b(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?c(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):c(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var s=l.a.createContext({}),o=function(e){var t=l.a.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):b(b({},t),e)),a},p=function(e){var t=o(e.components);return l.a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},d=l.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,c=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),p=o(a),d=n,m=p["".concat(c,".").concat(d)]||p[d]||u[d]||i;return a?l.a.createElement(m,b(b({ref:t},s),{},{components:a})):l.a.createElement(m,b({ref:t},s))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,c=new Array(i);c[0]=d;var b={};for(var r in t)hasOwnProperty.call(t,r)&&(b[r]=t[r]);b.originalType=e,b.mdxType="string"==typeof e?e:n,c[1]=b;for(var s=2;s<i;s++)c[s]=a[s];return l.a.createElement.apply(null,c)}return l.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"}}]);